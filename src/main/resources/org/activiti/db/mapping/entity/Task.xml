<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  
<mapper namespace="org.activiti.engine.impl.persistence.entity.TaskEntity">

  <!-- TASK INSERT -->
  
  <insert id="insertTask" parameterType="org.activiti.engine.impl.persistence.entity.TaskEntity">
    insert into ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_,
                      ASSIGNEE_, DELEGATION_, EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_KEY_, DUE_DATE_, SUSPENSION_STATE_, SIGN_OFF_TYPE_,START_SCRIPT_NAME_,
                      END_SCRIPT_NAME_,START_SCRIPT_,END_SCRIPT_,MAX_DAYS,WARNING_DAYS,DATE_TYPE,URGE_TIMES,FREQUENCE_INTERVAL,UNDEAL_OPERATION,NOTIFICATION_TYPE,IS_START_NODE_TASK,IS_DRAFT
                      ,htmlSourceForSubForm,formkey,isOpinion)
    values (#{id, jdbcType=VARCHAR},
            1,
            #{name, jdbcType=VARCHAR},
            #{parentTaskId, jdbcType=VARCHAR},
            #{description, jdbcType=VARCHAR},
            #{priority, jdbcType=INTEGER},
            #{createTime, jdbcType=TIMESTAMP},
            #{owner, jdbcType=VARCHAR},
            #{assignee, jdbcType=VARCHAR},
            #{delegationStateString, jdbcType=VARCHAR},
            #{executionId, jdbcType=VARCHAR},
            #{processInstanceId, jdbcType=VARCHAR},
            #{processDefinitionId, jdbcType=VARCHAR},
            #{taskDefinitionKey, jdbcType=VARCHAR},
            #{dueDate, jdbcType=TIMESTAMP},
            #{suspensionState, jdbcType=INTEGER},
            #{signOffType, jdbcType=INTEGER},
            #{startScriptName, jdbcType=VARCHAR},
            #{endScriptName, jdbcType=VARCHAR},
            #{startScript, jdbcType=VARCHAR},
            #{endScript, jdbcType=VARCHAR},
            #{maxDays, jdbcType=INTEGER},
            #{warningDays, jdbcType=INTEGER},
            #{dateType, jdbcType=VARCHAR},
            #{urgeTimes, jdbcType=INTEGER},
            #{frequenceInterval, jdbcType=INTEGER},
            #{undealOperation, jdbcType=VARCHAR},
            #{notificationType, jdbcType=VARCHAR},
            #{isForStartNodeTask, jdbcType=BOOLEAN},
            #{isDratf, jdbcType=BOOLEAN},
            #{htmlSourceForSubForm, jdbcType=VARCHAR},
            #{formkey, jdbcType=VARCHAR},
            #{isOpinion, jdbcType=VARCHAR}
            
           )
  </insert>
  
  <!-- TASK UPDATE -->
  
  <update id="updateTask" parameterType="org.activiti.engine.impl.persistence.entity.TaskEntity">
    update ${prefix}ACT_RU_TASK
    <set>
      REV_ = #{revisionNext, jdbcType=INTEGER},
      NAME_ = #{name, jdbcType=VARCHAR},
      PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},
      PRIORITY_ = #{priority, jdbcType=INTEGER},
      CREATE_TIME_ = #{createTime, jdbcType=TIMESTAMP},
      OWNER_ = #{owner, jdbcType=VARCHAR},
      ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},
      DELEGATION_ = #{delegationStateString, jdbcType=VARCHAR},
      EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
      PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},
      DESCRIPTION_ = #{description, jdbcType=VARCHAR},
      DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},
      SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER},
      SIGN_OFF_TYPE_ = #{signOffType, jdbcType=INTEGER},
      START_SCRIPT_NAME_ = #{startScriptName, jdbcType=VARCHAR},
      END_SCRIPT_NAME_ = #{endScriptName, jdbcType=VARCHAR},
      START_SCRIPT_ = #{startScript, jdbcType=VARCHAR},
      END_SCRIPT_ = #{endScript, jdbcType=VARCHAR},
      URGE_TIMES = #{urgeTimes, jdbcType=INTEGER},
      LAST_URGED_TIME = #{lastUrgedTime,jdbcType=TIMESTAMP},
      htmlSourceForSubForm = #{htmlSourceForSubForm, jdbcType=VARCHAR},
      formkey = #{formkey, jdbcType=VARCHAR},
      isOpinion = #{isOpinion, jdbcType=VARCHAR}
    </set>
    where ID_= #{id, jdbcType=VARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update>
  
  <!-- TASK DELETE -->
  <delete id="deleteTask" parameterType="org.activiti.engine.impl.persistence.entity.TaskEntity">
    delete from ${prefix}ACT_RU_TASK where ID_ = #{id} and REV_ = #{revision}
  </delete>
  
  <!-- TASK RESULTMAP -->
  
  <resultMap id="taskResultMap" type="org.activiti.engine.impl.persistence.entity.TaskEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR"/>
    <result property="revision" column="REV_" jdbcType="INTEGER"/>
    <result property="nameWithoutCascade" column="NAME_" jdbcType="VARCHAR"/>
    <result property="parentTaskIdWithoutCascade" column="PARENT_TASK_ID_" jdbcType="VARCHAR"/>
    <result property="descriptionWithoutCascade" column="DESCRIPTION_" jdbcType="VARCHAR"/>
    <result property="priorityWithoutCascade" column="PRIORITY_" jdbcType="INTEGER"/>
    <result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />
    <result property="ownerWithoutCascade" column="START_USER_ID_" jdbcType="VARCHAR"/>
    <result property="assigneeWithoutCascade" column="ASSIGNEE_" jdbcType="VARCHAR"/>
    <result property="delegationStateString" column="DELEGATION_" jdbcType="VARCHAR"/>
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="taskDefinitionKeyWithoutCascade" column="TASK_DEF_KEY_" jdbcType="VARCHAR"/>
    <result property="dueDateWithoutCascade" column="DUE_DATE_" jdbcType="TIMESTAMP"/>
    <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER" />
    <result property="signOffType" column="SIGN_OFF_TYPE_" jdbcType="INTEGER" />
    <result property="startScriptName" column="START_SCRIPT_NAME_" jdbcType="VARCHAR" />
    <result property="endScriptName" column="END_SCRIPT_NAME_" jdbcType="VARCHAR" />
    <result property="startScript" column="START_SCRIPT_" jdbcType="VARCHAR" />
    <result property="endScript" column="END_SCRIPT_" jdbcType="VARCHAR" />
    <result property="maxDays" column="MAX_DAYS" jdbcType="INTEGER" />
    <result property="warningDays" column="WARNING_DAYS" jdbcType="INTEGER" />
    <result property="dateType" column="DATE_TYPE" jdbcType="VARCHAR" />
    <result property="urgeTimes" column="URGE_TIMES" jdbcType="INTEGER" />
    <result property="frequenceInterval" column="FREQUENCE_INTERVAL" jdbcType="INTEGER" />
    <result property="undealOperation" column="UNDEAL_OPERATION" jdbcType="VARCHAR" />
    <result property="lastUrgedTime" column="LAST_URGED_TIME" jdbcType="TIMESTAMP" />
    <result property="notificationType" column="NOTIFICATION_TYPE" jdbcType="VARCHAR" />
    <result property="isForStartNodeTask" column="IS_START_NODE_TASK" jdbcType="BOOLEAN" />
    <result property="isDratf" column="IS_DRAFT" jdbcType="BOOLEAN" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />  
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP" />  
  	<result property="workflowAdmin" column="USER_ID_" jdbcType="VARCHAR" />   
  	<result property="assigneeFullName" column="ASSIGNEE_" jdbcType="VARCHAR" />   
  </resultMap>

  <!-- TASK SELECT -->  

  <resultMap id="startNodeResultMap" type="org.activiti.engine.impl.persistence.entity.TaskEntity">
    <id property="id" column="PROC_INST_ID_" jdbcType="VARCHAR"/>
    <result property="nameWithoutCascade" column="START_NODE_NAME" jdbcType="VARCHAR"/>
    <result property="createTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="executionId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="ownerWithoutCascade" column="START_USER_ID_" jdbcType="VARCHAR"/>		
  </resultMap>
  
   <resultMap id="workFlowTraceResultMap" type="org.activiti.engine.impl.persistence.entity.TaskEntity">
    <id property="id" column="id" jdbcType="VARCHAR"/>
    <result property="nameWithoutCascade" column="nodeName" jdbcType="VARCHAR"/>
    <result property="createTime" column="createdtime" jdbcType="TIMESTAMP" />
    <result property="assigneeWithoutCascade" column="createdby" jdbcType="VARCHAR"/>
    <result property="descriptionWithoutCascade" column="operationType" jdbcType="VARCHAR"/>	
    <result property="processDefinitionId" column="processdefinitionid" jdbcType="VARCHAR"/>	
  </resultMap>
  
   <resultMap id="formFiledTraceResultMap" type="org.activiti.engine.impl.persistence.entity.TaskEntity">
    <result property="nameWithoutCascade" column="fieldTime" jdbcType="VARCHAR"/>
    <result property="createTime" column="modifiedTime" jdbcType="TIMESTAMP" />
    <result property="assigneeWithoutCascade" column="modifiedBy" jdbcType="VARCHAR"/>
    <result property="descriptionWithoutCascade" column="chineseName" jdbcType="VARCHAR"/>	
    <result property="startScriptName" column="oldValue" jdbcType="VARCHAR" />
    <result property="endScriptName" column="newValue" jdbcType="VARCHAR" />
  </resultMap>  
  
  <select id="selectTask" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
   select * from ${prefix}ACT_RU_TASK where ID_ = #{taskId}
  </select>
  
   <select id="selectTasks" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
   select * from ${prefix}ACT_RU_TASK where ID_ IN 
   	<foreach item="id" index="index" collection="parameter.taskIds"
	      open="(" separator="," close=")">
	        #{id}
	  </foreach>
  </select>
  
  <select id="selectTasksByParentTaskId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select * from ${prefix}ACT_RU_TASK where PARENT_TASK_ID_ = #{parameter}
  </select>

  <select id="selectTasksByExecutionId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select distinct T.*
    from ${prefix}ACT_RU_TASK T
    where T.EXECUTION_ID_ = #{parameter}
  </select>
  
  <select id="selectTasksByProcessInstanceId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select T.*
    from ${prefix}ACT_RU_TASK T
    where T.PROC_INST_ID_ = #{parameter}
  </select>
  
  <select id="selectNextTaskForProcessInstance" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
	SELECT RES.* FROM ${prefix}ACT_RU_TASK RES where RES.PROC_INST_ID_ = #{parameter} LIMIT 1
  </select>
  
    <select id="selectNextTaskForProcessInstance_mssql" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
      SELECT TOP 1 RES.* FROM ${prefix}ACT_RU_TASK RES where RES.PROC_INST_ID_ = #{parameter}
 	</select>
 	
    <select id="selectNextTaskForProcessInstance_oracle" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
      SELECT RES.*,ROWNUM rnum FROM ${prefix}ACT_RU_TASK RES where RES.PROC_INST_ID_ = #{parameter} and ROWNUM = 1
 	</select> 	
  
  <select id="selectTasksByUserAndSignOffTypes" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select T.*
    from ${prefix}ACT_RU_TASK T INNER JOIN ${prefix}ACT_RU_IDENTITYLINK I
    where T.ID_ = I.TASK_ID_ AND I.USER_ID_ = #{parameter.userId}
    <if test="parameter.signOffType_0 != null">
    	AND (T.SIGN_OFF_TYPE_ = #{parameter.signOffType_0} 
    	<if test="parameter.signOffType_1 != null">
    	OR T.SIGN_OFF_TYPE_ = #{parameter.signOffType_1} 
    	</if>
    	<if test="parameter.signOffType_2 != null">
    	OR T.SIGN_OFF_TYPE_ = #{parameter.signOffType_2} 
    	</if>
    	<if test="parameter.signOffType_3 != null">
    	OR T.SIGN_OFF_TYPE_ = #{parameter.signOffType_3}
    	</if>
    	)
    </if>
    
     
  </select>
  
  
  <select id="selectToReadTask" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
      	SELECT 
      	RES.ID_, RES.REV_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, 
      	RES.DESCRIPTION_, RES.OWNER_, RES.DELEGATION_, RES.PRIORITY_, RES.CREATE_TIME_, RES.DUE_DATE_, RES.SUSPENSION_STATE_, 
      	RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK,RES.IS_DRAFT,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE RES.ASSIGNEE_ = users.id ) AS assigneeFullName,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner
   		from ${prefix}ACT_RU_TASK RES
      	inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_ 
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_        	

    <where>
    RES.ID_ = I.TASK_ID_  
		AND 
	RES.PROC_DEF_ID_ = D.ID_  
	<if test="classificationId != null">
		AND D.CLASSIFICATION_ID_='document_management'
	</if>
	<if test="suspensionState != null">
		<if test="suspensionState.stateCode == 1">
			AND RES.SUSPENSION_STATE_ = 1
		 </if>
		 <if test="suspensionState.stateCode == 2">
		 	AND RES.SUSPENSION_STATE_ = 2
		  </if>
	 </if>   
	    	<if test="identityType != null">
		       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and RES.IS_DRAFT = '0'
		    and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET DETAIL WHERE USER_ID_ = #{readerUser} AND DETAIL.TASK_ID_ = RES.ID_) = 0)
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
	    GROUP BY RES.ID_ 
     </if>  
  </select>
  
  <select id="selectToReadTask_oracle" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
      	SELECT 
      	DISTINCT(RES.ID_), RES.REV_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, 
      	RES.DESCRIPTION_, RES.OWNER_, RES.DELEGATION_, RES.PRIORITY_, RES.CREATE_TIME_, RES.DUE_DATE_, RES.SUSPENSION_STATE_, 
      	RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK,RES.IS_DRAFT,
      	(SELECT users.full_name FROM ETEC_USER users  WHERE RES.ASSIGNEE_ = users.id ) assigneeFullName,
      	(SELECT users.full_name FROM ETEC_USER users  WHERE PRO.START_USER_ID_ = users.id ) owner
   		from ${prefix}ACT_RU_TASK RES
      	inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_ 
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_        	

    <where>
    RES.ID_ = I.TASK_ID_  
		AND 
	RES.PROC_DEF_ID_ = D.ID_  
	<if test="classificationId != null">
		AND D.CLASSIFICATION_ID_='document_management'
	</if>
	<if test="suspensionState != null">
		<if test="suspensionState.stateCode == 1">
			AND RES.SUSPENSION_STATE_ = 1
		 </if>
		 <if test="suspensionState.stateCode == 2">
		 	AND RES.SUSPENSION_STATE_ = 2
		  </if>
	 </if>   
	    	<if test="identityType != null">
		       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and RES.IS_DRAFT = '0'
		    and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET DETAIL WHERE USER_ID_ = #{readerUser} AND DETAIL.TASK_ID_ = RES.ID_) = 0)
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
     </if>  
  </select>
  
  <select id="selectToReadTask_mssql" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
      	SELECT 
      	RES.ID_, RES.REV_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, 
      	RES.DESCRIPTION_, RES.OWNER_, RES.DELEGATION_, RES.PRIORITY_, RES.CREATE_TIME_, RES.DUE_DATE_, RES.SUSPENSION_STATE_, 
      	RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK,RES.IS_DRAFT,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE RES.ASSIGNEE_ = users.id ) AS assigneeFullName,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner
   		from ${prefix}ACT_RU_TASK RES
      	inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_ 
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_        	

    <where>
    RES.ID_ = I.TASK_ID_  
		AND 
	RES.PROC_DEF_ID_ = D.ID_  
	<if test="classificationId != null">
		AND D.CLASSIFICATION_ID_='document_management'
	</if>
	<if test="suspensionState != null">
		<if test="suspensionState.stateCode == 1">
			AND RES.SUSPENSION_STATE_ = 1
		 </if>
		 <if test="suspensionState.stateCode == 2">
		 	AND RES.SUSPENSION_STATE_ = 2
		  </if>
	 </if>   
	    	<if test="identityType != null">
		       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and RES.IS_DRAFT = '0'
		    and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET DETAIL WHERE USER_ID_ = #{readerUser} AND DETAIL.TASK_ID_ = RES.ID_) = 0)
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
	    <!-- GROUP BY RES.ID_ --> 
     </if>  
  </select>
  
   <select id="selectReadedTask" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
      	
      	SELECT 
      	RES.ID_, RES.REV_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, 
      	RES.DESCRIPTION_, RES.OWNER_, RES.DELEGATION_, RES.PRIORITY_, RES.CREATE_TIME_, RES.DUE_DATE_, RES.SUSPENSION_STATE_, 
      	RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK,RES.IS_DRAFT,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE RES.ASSIGNEE_ = users.id ) AS assigneeFullName,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner
   		from ${prefix}ACT_RU_TASK RES
      	inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_ 
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_  
	    <where> 
		    <if test="suspensionState != null">
		        <if test="suspensionState.stateCode == 1">
		            RES.SUSPENSION_STATE_ = 1
		        </if>
		        <if test="suspensionState.stateCode == 2">
		            RES.SUSPENSION_STATE_ = 2
		        </if>
	      	</if>  
	      	<if test="classificationId != null">
				AND D.CLASSIFICATION_ID_= #{classificationId}
			</if> 
	    	<if test="identityType != null">
		       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET DETAIL WHERE USER_ID_ = #{readerUser} AND DETAIL.TASK_ID_ = RES.ID_) != 0)
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
	    GROUP BY RES.ID_ 
     </if>  
  </select>
  
  <select id="selectReadedTask_oracle" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
      	
      	SELECT 
      	DISTINCT(RES.ID_), RES.REV_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, 
      	RES.DESCRIPTION_, RES.OWNER_, RES.DELEGATION_, RES.PRIORITY_, RES.CREATE_TIME_, RES.DUE_DATE_, RES.SUSPENSION_STATE_, 
      	RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK,RES.IS_DRAFT,
      	(SELECT users.full_name FROM ETEC_USER users  WHERE RES.ASSIGNEE_ = users.id ) assigneeFullName,
      	(SELECT users.full_name FROM ETEC_USER users  WHERE PRO.START_USER_ID_ = users.id ) owner
   		from ${prefix}ACT_RU_TASK RES
      	inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_ 
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_  
	    <where> 
		    <if test="suspensionState != null">
		        <if test="suspensionState.stateCode == 1">
		            RES.SUSPENSION_STATE_ = 1
		        </if>
		        <if test="suspensionState.stateCode == 2">
		            RES.SUSPENSION_STATE_ = 2
		        </if>
	      	</if>  
	      	<if test="classificationId != null">
				AND D.CLASSIFICATION_ID_= #{classificationId}
			</if> 
	    	<if test="identityType != null">
		       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET DETAIL WHERE USER_ID_ = #{readerUser} AND DETAIL.TASK_ID_ = RES.ID_) != 0)
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
     </if>  
  </select>
  
<select id="selectReadedTask_mssql" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
      	
      	SELECT 
      	RES.ID_, RES.REV_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, 
      	RES.DESCRIPTION_, RES.OWNER_, RES.DELEGATION_, RES.PRIORITY_, RES.CREATE_TIME_, RES.DUE_DATE_, RES.SUSPENSION_STATE_, 
      	RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK,RES.IS_DRAFT,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE RES.ASSIGNEE_ = users.id ) AS assigneeFullName,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner
   		from ${prefix}ACT_RU_TASK RES
      	inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_ 
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_  
	    <where> 
		    <if test="suspensionState != null">
		        <if test="suspensionState.stateCode == 1">
		            RES.SUSPENSION_STATE_ = 1
		        </if>
		        <if test="suspensionState.stateCode == 2">
		            RES.SUSPENSION_STATE_ = 2
		        </if>
	      	</if>  
	      	<if test="classificationId != null">
				AND D.CLASSIFICATION_ID_= #{classificationId}
			</if> 
	    	<if test="identityType != null">
		       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET DETAIL WHERE USER_ID_ = #{readerUser} AND DETAIL.TASK_ID_ = RES.ID_) != 0)
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
	    <!-- GROUP BY RES.ID_  -->
     </if>  
  </select>  
  
  <select id="selectToReadEndTask" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
		SELECT RES.ID_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, RES.DESCRIPTION_, RES.OWNER_,
		RES.START_TIME_, RES.END_TIME_, RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK, RES.IS_DRAFT,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE RES.ASSIGNEE_ = users.id ) AS assigneeFullName
   		from ${prefix}ACT_HI_TASKINST RES
      	inner join ${prefix}ACT_HI_IDENTITYLINK I on I.EXECUTION_ID = EXECUTION_ID_
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
	    <where> 
	  	  IS_ENDEVENT = 'true'
	   	  and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET DET WHERE USER_ID_ = #{readerUser} AND DET.TASK_ID_ = RES.ID_) = 0)
	    	<if test="identityType != null">
	       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
	    GROUP BY RES.ID_
     </if>  
  </select>
  
  <select id="selectToReadEndTask_oracle" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
		SELECT DISTINCT(RES.ID_), RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, RES.DESCRIPTION_, RES.OWNER_,
		RES.START_TIME_, RES.END_TIME_, RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK, RES.IS_DRAFT,
      	(SELECT users.full_name  FROM ETEC_USER users  WHERE PRO.START_USER_ID_ = users.id ) owner,
      	(SELECT users.full_name  FROM ETEC_USER users  WHERE RES.ASSIGNEE_ = users.id ) assigneeFullName
   		from ${prefix}ACT_HI_TASKINST RES
      	inner join ${prefix}ACT_HI_IDENTITYLINK I on I.EXECUTION_ID = EXECUTION_ID_
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
	    <where> 
	  	  IS_ENDEVENT = 'true'
	   	  and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET DET WHERE USER_ID_ = #{readerUser} AND DET.TASK_ID_ = RES.ID_) = 0)
	    	<if test="identityType != null">
	       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
     </if>  
  </select>
  
  <select id="selectToReadEndTask_mssql" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
		SELECT RES.ID_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, RES.DESCRIPTION_, RES.OWNER_,
		RES.START_TIME_, RES.END_TIME_, RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK, RES.IS_DRAFT,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE RES.ASSIGNEE_ = users.id ) AS assigneeFullName
   		from ${prefix}ACT_HI_TASKINST RES
      	inner join ${prefix}ACT_HI_IDENTITYLINK I on I.EXECUTION_ID = EXECUTION_ID_
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
	    <where> 
	  	  IS_ENDEVENT = 'true'
	   	  and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET DET WHERE USER_ID_ = #{readerUser} AND DET.TASK_ID_ = RES.ID_) = 0)
	    	<if test="identityType != null">
	       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
	    <!-- GROUP BY RES.ID_ -->
     </if>  
  </select>
  
  <select id="selectReadedEndTask" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
   		SELECT RES.ID_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, RES.DESCRIPTION_, RES.OWNER_,
		RES.START_TIME_, RES.END_TIME_, RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK, RES.IS_DRAFT,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE RES.ASSIGNEE_ = users.id ) AS assigneeFullName
   		from ${prefix}ACT_HI_TASKINST RES
      	inner join ${prefix}ACT_HI_IDENTITYLINK I on I.EXECUTION_ID = EXECUTION_ID_
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_  
      	LEFT JOIN ETEC_ACT_HI_IDENTITYLINK_DET DET ON DET.TASK_ID_ = RES.ID_
	    <where> 
	  	  IS_ENDEVENT = 'true'
	  	  <if test="classificationId != null">
				AND D.CLASSIFICATION_ID_= #{classificationId}
			</if> 
	  	  and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET WHERE USER_ID_ = #{readerUser} and RES.ID_ = TASK_ID_) != 0)
	    	<if test="identityType != null">
		       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
	    GROUP BY RES.ID_ 
     </if>  
  </select>
  
  <select id="selectReadedEndTask_oracle" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
   		SELECT DISTINCT(RES.ID_), RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, RES.DESCRIPTION_, RES.OWNER_,
		RES.START_TIME_, RES.END_TIME_, RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK, RES.IS_DRAFT,
      	(SELECT users.first_name FROM ETEC_USER users  WHERE PRO.START_USER_ID_ = users.id ) owner,
      	(SELECT users.first_name FROM ETEC_USER users  WHERE RES.ASSIGNEE_ = users.id ) assigneeFullName
   		from ${prefix}ACT_HI_TASKINST RES
      	inner join ${prefix}ACT_HI_IDENTITYLINK I on I.EXECUTION_ID = EXECUTION_ID_
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_  
      	LEFT JOIN ETEC_ACT_HI_IDENTITYLINK_DET DET ON DET.TASK_ID_ = RES.ID_
	    <where> 
	  	  IS_ENDEVENT = 'true'
	  	  <if test="classificationId != null">
				AND D.CLASSIFICATION_ID_= #{classificationId}
			</if> 
	  	  and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET WHERE USER_ID_ = #{readerUser} and RES.ID_ = TASK_ID_) != 0)
	    	<if test="identityType != null">
		       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
     </if>  
  </select>
  
   <select id="selectReadedEndTask_mssql" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <if test="readerUser != null">
   		SELECT RES.ID_, RES.EXECUTION_ID_, RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.NAME_, RES.PARENT_TASK_ID_, RES.DESCRIPTION_, RES.OWNER_,
		RES.START_TIME_, RES.END_TIME_, RES.SIGN_OFF_TYPE_, RES.IS_START_NODE_TASK, RES.IS_DRAFT,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner,
      	(SELECT CONCAT(users.first_name ,' ', users.last_name )  FROM ETEC_USER AS users  WHERE RES.ASSIGNEE_ = users.id ) AS assigneeFullName
   		from ${prefix}ACT_HI_TASKINST RES
      	inner join ${prefix}ACT_HI_IDENTITYLINK I on I.EXECUTION_ID = EXECUTION_ID_
      	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_  
      	LEFT JOIN ETEC_ACT_HI_IDENTITYLINK_DET DET ON DET.TASK_ID_ = RES.ID_
	    <where> 
	  	  IS_ENDEVENT = 'true'
	  	  <if test="classificationId != null">
				AND D.CLASSIFICATION_ID_= #{classificationId}
			</if> 
	  	  and ((SELECT count(TASK_ID_) FROM ${prefix}ACT_HI_IDENTITYLINK_DET WHERE USER_ID_ = #{readerUser} and RES.ID_ = TASK_ID_) != 0)
	    	<if test="identityType != null">
		       		and I.TYPE_ = #{identityType}	       
		    </if>
		    and
   			(
	    		(
	    		   	I.USER_ID_ IS NOT NULL
	      			and I.USER_ID_ = #{readerUser}
	      		 )       		
				 <!-- Identity links with only group -->
	    		 <!-- If user id is present that will be already present in My Buckets -->
				 <if test="readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0 != null || readerDepartment != null ">
						OR
			      		(
				      		I.USER_ID_ IS  NULL
							AND
				        	(   
					           <if test="readerGroups.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'groups' 
						            and I.GROUP_ID_ IN
							            <foreach item="group" index="index" collection="readerGroups" 
							                     open="(" separator="," close=")">
							              #{group}
							            </foreach>
						            )
				          		</if>
				          		<if test="readerGroups.size() &gt; 0 &amp;&amp; readerRoles.size() &gt; 0">
				          			or
				          		</if>
						        <if test="readerRoles.size() &gt; 0">
						            (
						            I.GROUP_TYPE_  = 'roles' 
						            and  I.GROUP_ID_ IN
							            <foreach item="role" index="index" collection="readerRoles" 
							                     open="(" separator="," close=")">
							              #{role}
							            </foreach>
						            )
						        </if>
								<if test="(readerGroups.size() &gt; 0 || readerRoles.size() &gt; 0) &amp;&amp; readerDepartment != null ">
				          			or
				          		</if>
						        <if test="readerDepartment != null">
						            (
						            I.GROUP_TYPE_  = 'departments' 
						            and I.GROUP_ID_ = #{readerDepartment}
						            )
						        </if>
				        	 )
			        	 )
		         </if>	
                ) 
	    </where>
	    <!-- GROUP BY RES.ID_ --> 
     </if>  
  </select>
  
  <select id="selectTaskByQueryCriteria" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    ${limitBefore}
    select distinct RES.* ${limitBetween}
    <include refid="selectTaskByQueryCriteriaSql"/> 
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectTaskCountByQueryCriteria" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultType="long">
    select count(distinct RES.ID_)
    <include refid="selectTaskByQueryCriteriaSql"/>
  </select>
  
  <sql id="selectTaskByQueryCriteriaSql">  
    from ${prefix}ACT_RU_TASK RES
    <if test="candidateUser != null || candidateGroups != null || involvedUser != null">
      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
    </if>
    	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_

    <foreach collection="variables" index="index" item="var">
      <choose>
        <when test="var.local">
          inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.ID_ = A${index}.TASK_ID_ 
        </when>
        <otherwise>
          inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_ 
        </otherwise>
      </choose>       
    </foreach>
    <if test="processDefinitionKey != null || processDefinitionName != null">
      inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_
    </if>
    <if test="processInstanceBusinessKey != null">
        inner join ${prefix}ACT_RU_EXECUTION E on RES.PROC_INST_ID_ = E.ID_
    </if>
    <where> 
      <if test="taskId != null">
        RES.ID_ = #{taskId}
      </if>
      <if test="name != null">
        and RES.NAME_ = #{name}
      </if>
      <if test="nameLike != null">
        and RES.NAME_ like #{nameLike}
      </if>
      <if test="description != null">
        and RES.DESCRIPTION_ = #{description}
      </if>
      <if test="descriptionLike != null">
        and RES.DESCRIPTION_ like #{descriptionLike}
      </if>
      <if test="priority != null">
        and RES.PRIORITY_ = #{priority}
      </if> 
      <if test="minPriority != null">
        and RES.PRIORITY_ &gt;= #{minPriority}
      </if> 
      <if test="maxPriority != null">
        and RES.PRIORITY_ &lt;= #{maxPriority}
      </if> 
      <if test="assignee != null">
        and RES.ASSIGNEE_ = #{assignee}
      </if>
      <if test="owner != null">
        and RES.OWNER_ = #{owner}
      </if>
      <if test="unassigned">
        and RES.ASSIGNEE_ IS NULL
      </if>
      <if test="noDelegationState">
        and RES.DELEGATION_ IS NULL
      </if>
      <if test="delegationState != null">
        and RES.DELEGATION_ = #{delegationStateString}
      </if>
      <if test="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="processInstanceBusinessKey != null">
        and E.BUSINESS_KEY_ = #{processInstanceBusinessKey}
      </if>         
      <if test="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId}
      </if>
      <if test="createTime != null">
        and RES.CREATE_TIME_ = #{createTime}
      </if>
      <if test="createTimeBefore != null">
        and RES.CREATE_TIME_ &lt; #{createTimeBefore}
      </if>
      <if test="createTimeAfter != null">
        and RES.CREATE_TIME_ &gt; #{createTimeAfter}
      </if>
      <if test="key != null">
        and RES.TASK_DEF_KEY_ = #{key}
      </if>
      <if test="keyLike != null">
        and RES.TASK_DEF_KEY_ like #{keyLike}
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processDefinitionKey != null">
        and D.KEY_ = #{processDefinitionKey}
      </if>
      <if test="processDefinitionName != null">
        and D.NAME_ = #{processDefinitionName}
      </if>
      <if test="dueDate != null">
        and RES.DUE_DATE_ = #{dueDate}
      </if>
      <if test="dueBefore != null">
        and RES.DUE_DATE_ &lt; #{dueBefore}
      </if>
      <if test="dueAfter != null">
        and RES.DUE_DATE_ &gt; #{dueAfter}
      </if>
      <if test="dueDate != null || dueBefore != null || dueAfter != null">
        and RES.DUE_DATE_ is not null
      </if>
      <if test="excludeSubtasks">
        and RES.PARENT_TASK_ID_ IS NULL
      </if>
      <if test="signOffType != null">
        RES.SIGN_OFF_TYPE_ = #{signOffType}
      </if>
      <if test="candidateUser != null || candidateGroups != null">
        and RES.ASSIGNEE_ is null
        and I.TYPE_ = #{identityType}
        and 
        ( 
          <if test="candidateUser != null">
            I.USER_ID_ = #{candidateUser}          
          </if>
          <if test="candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
            or
          </if>
          <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
            I.GROUP_ID_ IN
            <foreach item="group" index="index" collection="candidateGroups" 
                     open="(" separator="," close=")">
              #{group}
            </foreach>
          </if>
        )
      </if>
      <if test="involvedUser != null">
        and I.USER_ID_ = #{involvedUser}
      </if>
      <foreach item="var" collection="variables" index="index">
        <if test="!var.local">
          <!-- When process instance variable is queried for, taskId should be null -->
          and A${index}.TASK_ID_ is null
        </if>
        <if test="var.name != null">
          <!-- Match-all variable-names when name is null -->
          and A${index}.NAME_= #{var.name}
        </if>
        <if test="!var.type.equals('null')">
          and A${index}.TYPE_ = #{var.type}
        </if>
        <!-- Variable value -->
        <if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
          <choose>
            <when test="var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE')">
              and lower(A${index}.TEXT_)
            </when>
            <otherwise>
              and A${index}.TEXT_
            </otherwise>
          </choose> 
          <choose>
              <when test="var.operator.equals('LIKE')">LIKE</when>
              <otherwise><include refid="executionVariableOperator" /></otherwise>
          </choose>          
          #{var.textValue}
        </if>
        <if test="var.textValue2 != null">
          and A${index}.TEXT2_ 
          <choose>
            <when test="var.operator.equals('LIKE')">LIKE</when>
            <otherwise><include refid="executionVariableOperator" /></otherwise>
          </choose>          
          #{var.textValue2}
        </if>
        <if test="var.longValue != null">
          and A${index}.LONG_
          <include refid="executionVariableOperator" />
          #{var.longValue}
        </if>
        <if test="var.doubleValue != null">
          and A${index}.DOUBLE_ 
          <include refid="executionVariableOperator" />
          #{var.doubleValue}
        </if>
        <!-- Null variable type -->
        <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
          <choose>
            <when test="var.operator.equals('NOT_EQUALS')">
              and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
            </when>
            <otherwise>
              and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
            </otherwise>
          </choose>          
        </if>
      </foreach>
      <if test="suspensionState != null">
        <if test="suspensionState.stateCode == 1">
            and RES.SUSPENSION_STATE_ = 1
        </if>
        <if test="suspensionState.stateCode == 2">
            and RES.SUSPENSION_STATE_ = 2
        </if>
      </if>
      <if test="signOffType != null">
        <if test="signOffType == 1">
            and RES.SIGN_OFF_TYPE_ = 1
        </if>
        <if test="signOffType == 2">
            and RES.SIGN_OFF_TYPE_ = 2
        </if>
        <if test="signOffType == 3">
            and RES.SIGN_OFF_TYPE_ = 3
        </if>
        <if test="signOffType == 3">
            and RES.SIGN_OFF_TYPE_ = 3
        </if>
      </if>
    </where>
  </sql>
  
  <select id="selectTasksForWaitingList" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <!-- Waiting list query includes union of waiting list for all four type of sign-offs -->
    <include refid="selectWaitingTasksForSingleSignOff"/> 
    UNION ALL
    <include refid="selectWaitingTasksForMultiSeqSignOff"/> 
    UNION ALL
    <include refid="selectWaitingTasksForMultiProcessAndMultiPlayer"/> 
  </select>
  
  <!-- Gets all the mybuckets and waiting list as a whole for the user -->
   <select id="selectIntegratedTasksForUser" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    select * from 
    (
    <include refid="selectMyAssignedTasks"/> 
    
     <include refid="selectMyCoordinatorTasks"/> 
    UNION ALL
    
    <!-- Waiting list query includes union of waiting list for all four type of sign-offs -->
    <include refid="selectWaitingTasksForSingleSignOff"/> 
    UNION ALL
    <include refid="selectWaitingTasksForMultiSeqSignOff"/> 
    UNION ALL
    <include refid="selectWaitingTasksForMultiProcessAndMultiPlayer"/> 
    ) RST GROUP BY RST.ID_
  </select>
  
  
     <select id="selectIntegratedTasksForUser_mssql" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    select DISTINCT RST.ID_,RST.* from 
    (
    <include refid="selectMyAssignedTasks"/> 
    
     <include refid="selectMyCoordinatorTasks"/> 
    UNION ALL
    
    <!-- Waiting list query includes union of waiting list for all four type of sign-offs -->
    <include refid="selectWaitingTasksForSingleSignOff"/> 
    UNION ALL
    <include refid="selectWaitingTasksForMultiSeqSignOff_mssql"/>  
    UNION ALL
    <include refid="selectWaitingTasksForMultiProcessAndMultiPlayer"/> 
    ) RST
  </select>
  
       <select id="selectIntegratedTasksForUser_oracle" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    select DISTINCT RST.ID_,RST.* from 
    (
    <include refid="selectMyAssignedTasks"/> 
    
     <include refid="selectMyCoordinatorTasks"/> 
    UNION ALL
    
    <!-- Waiting list query includes union of waiting list for all four type of sign-offs -->
    <include refid="selectWaitingTasksForSingleSignOff"/> 
    UNION ALL
    <include refid="selectWaitingTasksForMultiSeqSignOff_oracle"/>  
    UNION ALL
    <include refid="selectWaitingTasksForMultiProcessAndMultiPlayer"/> 
    ) RST
  </select>
  
  
  <sql id="selectMyAssignedTasks">
  	SELECT RES.*,PRO.START_USER_ID_
    from ${prefix}ACT_RU_TASK RES
    inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
    <if test="candidateUser != null">
      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
    </if>     
    <where>       
      <if test="assignee != null">
        and RES.ASSIGNEE_ = #{assignee}
      </if>     
      <if test="suspensionState != null">
        <if test="suspensionState.stateCode == 1">
            and RES.SUSPENSION_STATE_ = 1
        </if>
        <if test="suspensionState.stateCode == 2">
            and RES.SUSPENSION_STATE_ = 2
        </if>
      </if>   
      <if test="candidateUser != null">
      		and I.USER_ID_ = #{assignee}
      </if>  
    </where>
  </sql>
  
   <sql id="selectMyCoordinatorTasks">
	   <if test="coordinatorUser != null">
	   UNION ALL
	  	SELECT RES.*,PRO.START_USER_ID_
	    from ${prefix}ACT_RU_TASK RES
	       inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
	      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_      
	    <where>  
	          
	      <if test="suspensionState != null">
	        <if test="suspensionState.stateCode == 1">
	            and RES.SUSPENSION_STATE_ = 1
	        </if>
	        <if test="suspensionState.stateCode == 2">
	            and RES.SUSPENSION_STATE_ = 2
	        </if>
	      </if>   
	      <if test="coordinatorUser != null">
	      		and I.USER_ID_ = #{coordinatorUser}      		
	      </if>  
	      <if test="coordinatorUser != null &amp;&amp; identityType != null">
	      		and I.TYPE_ = #{identityType}
	      </if> 
	    </where>
	     </if>  
  </sql>
  

   <select id="selectProcessAdminTasks" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
	    <!-- Get tasks with identity links having group ids in which user is a member -->
	  	SELECT RES.* from ${prefix}ACT_RU_TASK RES
		    <if test="candidateUser != null">
		      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
		     <where> 
			       I.TYPE_ = #{identityType} and I.USER_ID_ = #{candidateUser}   
		    </where>  
		    </if>
  </select>

  
  <!-- Single sign off where only one assignee for one task -->
  <sql id="selectWaitingTasksForSingleSignOff"> 
    <!-- Get tasks with identity links having group ids in which user is a member -->
  	SELECT RES.*,PRO.START_USER_ID_ from ${prefix}ACT_RU_TASK RES
  	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
    <if test="candidateUser != null || candidateGroups != null">
      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
    </if>
   
    <where>
    	RES.SIGN_OFF_TYPE_ = 1
    	and
    	RES.SUSPENSION_STATE_ = 1
		<if test="identityType != null">
	       AND I.TYPE_ = #{identityType}
	       
	    </if>
    	and
    	(
    		<if test="candidateUser != null">
    		<if test="assignee != null">
    		 (
    		   	I.USER_ID_ IS NOT NULL
	        	and RES.ASSIGNEE_ IS NOT NULL
      			and I.USER_ID_ = #{assignee}
      			and RES.ASSIGNEE_ = #{assignee}
      		 )
      		 OR
      		 (
	        	I.USER_ID_ IS NOT NULL
	        	and RES.ASSIGNEE_ IS NULL
      			and I.USER_ID_ = #{assignee}
      		  ) 
      		  OR
      		  </if>
      		  (
      		  I.USER_ID_ = #{candidateUser}
				 <!-- Identity links with only group -->
	    		<!-- If user id is present that will be already present in My Buckets -->
				<if test="candidateUser != null || candidateGroups != null || candidateRoles != null || candidateDepartment != null ">
				OR
	        	</if>	       		
	        	(   
		           <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
		            (
		            I.GROUP_TYPE_  = 'groups' 
		            and I.GROUP_ID_ IN
			            <foreach item="group" index="index" collection="candidateGroups" 
			                     open="(" separator="," close=")">
			              #{group}
			            </foreach>
		            )
	          		</if>
		           <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0 &amp;&amp; candidateUser != null &amp;&amp; candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
		            or
		          </if>
		          <if test="candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
		            (
		            I.GROUP_TYPE_  = 'roles' 
		            and  I.GROUP_ID_ IN
			            <foreach item="role" index="index" collection="candidateRoles" 
			                     open="(" separator="," close=")">
			              #{role}
			            </foreach>
		            )
		          </if>
		           <if test="candidateUser != null &amp;&amp; candidateDepartment != null ">
		            or
		          </if>
		          <if test="candidateDepartment != null">
		            (
		            I.GROUP_TYPE_  = 'departments' 
		            and I.GROUP_ID_ = #{candidateDepartment}
		            )
		          </if>
	        	)
	      	</if>
      		)
      	)    
    </where>    
  </sql>
  
  <!-- More than one assignee for a task, with defined order to sign off -->
  <sql id="selectWaitingTasksForMultiSeqSignOff">  
  <!-- Tasks with identity links with minimum order and groups to which user is present -->
  SELECT RES.*,PRO.START_USER_ID_ from ${prefix}ACT_RU_TASK RES
    <if test="candidateUser != null || candidateGroups != null">
      inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      inner join (SELECT * from ${prefix}ACT_RU_IDENTITYLINK I
      
      <where> 	
			(
			<if test="candidateUser != null" >
			(
	    			I.USER_ID_ = #{candidateUser}
	    		</if>
	    		 <!-- Identity links with only group -->
	    		<!-- If user id is present that will be already present in My Buckets -->
				<if test="candidateUser != null || candidateGroups != null || candidateRoles != null || candidateDepartment != null ">
				OR
	        	</if>	       		
	        	(   
	          	 <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
		            (		            
			            I.GROUP_TYPE_  = 'groups' 
			            and I.GROUP_ID_ IN
			            <foreach item="group" index="index" collection="candidateGroups" 
			                     open="(" separator="," close=")">
			              #{group}
			            </foreach>
		            )
          		</if>
				<if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0 &amp;&amp; candidateUser != null &amp;&amp; candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
				  or
				</if>
		          <if test="candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
		            (
			            I.GROUP_TYPE_  = 'roles' 
			            and  I.GROUP_ID_ IN
				            <foreach item="role" index="index" collection="candidateRoles" 
				                     open="(" separator="," close=")">
				              #{role}
				            </foreach>
		            )
		          </if>
	           <if test="candidateUser != null &amp;&amp; candidateDepartment != null ">
	            or
	          </if>
	          <if test="candidateDepartment != null">
	            (
		            I.GROUP_TYPE_  = 'departments' 
		            and I.GROUP_ID_ = #{candidateDepartment}
	            )
	          </if>
      		)
      		)
      	 AND I.ORDER_ = (SELECT MIN(IDNTY_ORDER.ORDER_) from ${prefix}ACT_RU_IDENTITYLINK AS IDNTY_ORDER WHERE IDNTY_ORDER.TASK_ID_ = I.TASK_ID_ AND IDNTY_ORDER.TYPE_  = 'organizer' )
      	)
      </where>
      <!-- Get minimum order -->
    ORDER BY I.ORDER_ ASC) as I ON I.TASK_ID_ = RES.ID_    
    </if>   
    <where>     	    	
    	RES.SIGN_OFF_TYPE_ = 3 <!-- Sign off type, multi seq -->
    	and RES.SUSPENSION_STATE_ = 1
    	<if test="identityType != null">
	      and I.TYPE_ = #{identityType} 
	    </if>
	   <!--  and
    	(
    		<if test="candidateUser != null">
    		(
    		   	I.USER_ID_ IS NOT NULL
	        	and RES.ASSIGNEE_ IS NOT NULL
      			and I.USER_ID_ = #{assignee}
      			and RES.ASSIGNEE_ = #{assignee}
      		 )
      		 OR
      		 (
	        	I.USER_ID_ IS NOT NULL
	        	and RES.ASSIGNEE_ IS NULL
      			and I.USER_ID_ = #{assignee}
      		  )
      		  OR
      		  (
      		  I.USER_ID_ IS  NULL
	        	)
		   </if>
		  )    	   -->  
    </where>
    <!-- Since we choose minimum order, we group by task ids to select identity links for each task with min order -->
    GROUP BY I.TASK_ID_    
  </sql>
  
  <sql id="selectWaitingTasksForMultiSeqSignOff_oracle">  
  <!-- Tasks with identity links with minimum order and groups to which user is present -->
  SELECT RES.*,PRO.START_USER_ID_ from ${prefix}ACT_RU_TASK RES
    <if test="candidateUser != null || candidateGroups != null">
      inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      inner join (SELECT DISTINCT I.* from ${prefix}ACT_RU_IDENTITYLINK I
      
      <where> 	
			(
			<if test="candidateUser != null" >
			(
	    			I.USER_ID_ = #{candidateUser}
	    		</if>
	    		 <!-- Identity links with only group -->
	    		<!-- If user id is present that will be already present in My Buckets -->
				<if test="candidateUser != null || candidateGroups != null || candidateRoles != null || candidateDepartment != null ">
				OR
	        	</if>	       		
	        	(   
	          	 <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
		            (		            
			            I.GROUP_TYPE_  = 'groups' 
			            and I.GROUP_ID_ IN
			            <foreach item="group" index="index" collection="candidateGroups" 
			                     open="(" separator="," close=")">
			              #{group}
			            </foreach>
		            )
          		</if>
				<if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0 &amp;&amp; candidateUser != null &amp;&amp; candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
				  or
				</if>
		          <if test="candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
		            (
			            I.GROUP_TYPE_  = 'roles' 
			            and  I.GROUP_ID_ IN
				            <foreach item="role" index="index" collection="candidateRoles" 
				                     open="(" separator="," close=")">
				              #{role}
				            </foreach>
		            )
		          </if>
	           <if test="candidateUser != null &amp;&amp; candidateDepartment != null ">
	            or
	          </if>
	          <if test="candidateDepartment != null">
	            (
		            I.GROUP_TYPE_  = 'departments' 
		            and I.GROUP_ID_ = #{candidateDepartment}
	            )
	          </if>
      		)
      		)
      	 AND I.ORDER_ = (SELECT MIN(IDNTY_ORDER.ORDER_) from ${prefix}ACT_RU_IDENTITYLINK IDNTY_ORDER WHERE IDNTY_ORDER.TASK_ID_ = I.TASK_ID_ AND IDNTY_ORDER.TYPE_ = 'organizer' )
      	)
      </where>
      <!-- Get minimum order -->
    ORDER BY I.ORDER_ ASC) I ON I.TASK_ID_ = RES.ID_    
    </if>   
    <where>     	    	
    	RES.SIGN_OFF_TYPE_ = 3 <!-- Sign off type, multi seq -->
    	and RES.SUSPENSION_STATE_ = 1
    	<if test="identityType != null">
	      and I.TYPE_ = #{identityType} 
	    </if>
    </where>
  </sql>
  
  <sql id="selectWaitingTasksForMultiSeqSignOff_mssql">  
  <!-- Tasks with identity links with minimum order and groups to which user is present -->
  SELECT RES.*,PRO.START_USER_ID_ from ${prefix}ACT_RU_TASK RES
    <if test="candidateUser != null || candidateGroups != null">
      inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
      inner join (SELECT DISTINCT I.*, ROW_NUMBER() OVER (ORDER BY I.ORDER_ ASC) as row from ${prefix}ACT_RU_IDENTITYLINK I
      
      <where> 	
			(
			<if test="candidateUser != null" >
			(
	    			I.USER_ID_ = #{candidateUser}
	    		</if>
	    		 <!-- Identity links with only group -->
	    		<!-- If user id is present that will be already present in My Buckets -->
				<if test="candidateUser != null || candidateGroups != null || candidateRoles != null || candidateDepartment != null ">
				OR
	        	</if>	       		
	        	(   
	          	 <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
		            (		            
			            I.GROUP_TYPE_  = 'groups' 
			            and I.GROUP_ID_ IN
			            <foreach item="group" index="index" collection="candidateGroups" 
			                     open="(" separator="," close=")">
			              #{group}
			            </foreach>
		            )
          		</if>
				<if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0 &amp;&amp; candidateUser != null &amp;&amp; candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
				  or
				</if>
		          <if test="candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
		            (
			            I.GROUP_TYPE_  = 'roles' 
			            and  I.GROUP_ID_ IN
				            <foreach item="role" index="index" collection="candidateRoles" 
				                     open="(" separator="," close=")">
				              #{role}
				            </foreach>
		            )
		          </if>
	           <if test="candidateUser != null &amp;&amp; candidateDepartment != null ">
	            or
	          </if>
	          <if test="candidateDepartment != null">
	            (
		            I.GROUP_TYPE_  = 'departments' 
		            and I.GROUP_ID_ = #{candidateDepartment}
	            )
	          </if>
      		)
      		)
      	 AND I.ORDER_ = (SELECT MIN(IDNTY_ORDER.ORDER_) from ${prefix}ACT_RU_IDENTITYLINK AS IDNTY_ORDER WHERE IDNTY_ORDER.TASK_ID_ = I.TASK_ID_ AND IDNTY_ORDER.TYPE_  = 'organizer' )
      	)
      </where>
      <!-- Get minimum order -->
   <!--  ORDER BY I.ORDER_ ASC -->) as I ON I.TASK_ID_ = RES.ID_    
    </if>   
    <where>     	    	
    	RES.SIGN_OFF_TYPE_ = 3 <!-- Sign off type, multi seq -->
    	and RES.SUSPENSION_STATE_ = 1
    	<if test="identityType != null">
	      and I.TYPE_ = #{identityType} 
	    </if>
    </where>
  </sql>
  
  <!-- For multi sequence sign off - multiple assignee for a task without any order, but all should sign off compulsorily -->
  <!-- For multi player single sign off - multiple assignee for a task, but if one signs off, task completes -->
  <!-- Both these have same criteria for selecting tasks in waiting list -->
  <sql id="selectWaitingTasksForMultiProcessAndMultiPlayer">  
  SELECT RES.*,PRO.START_USER_ID_ from ${prefix}ACT_RU_TASK RES
  	<!-- Tasks with identity links with group ids of user or user id -->
    <if test="candidateUser != null || candidateGroups != null">
      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
    </if>
   	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
    <where>     	
    	RES.SIGN_OFF_TYPE_ IN (2,4) 
    	and RES.SUSPENSION_STATE_ = 1 <!-- Any of two types -->
        <if test="identityType != null">	    
        and I.TYPE_ = #{identityType}
        </if>
        and
        (
    		<if test="candidateUser != null">
    		(
    		   	I.USER_ID_ IS NOT NULL
	        	and RES.ASSIGNEE_ IS NOT NULL
      			and I.USER_ID_ = #{assignee}
      			and RES.ASSIGNEE_ = #{assignee}
      		 )
      		 OR
      		 (
	        	I.USER_ID_ IS NOT NULL
	        	and RES.ASSIGNEE_ IS NULL
      			and I.USER_ID_ = #{assignee}
      		  )
      		  OR
      		  (
      		  I.USER_ID_ IS  NULL
	        	<!-- Identity links with only group -->
	    		<!-- If user id is present that will be already present in My Buckets -->
				<if test="candidateUser != null || candidateGroups != null || candidateRoles != null || candidateDepartment != null ">
				AND
	        	</if> 		
		           <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
		            (
		            I.GROUP_TYPE_  = 'groups' 
		            and I.GROUP_ID_ IN
		            <foreach item="group" index="index" collection="candidateGroups" 
		                     open="(" separator="," close=")">
		              #{group}
		            </foreach>
		            )
		          </if>
	           <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0 &amp;&amp; candidateUser != null &amp;&amp; candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
	            or
	          </if>
	          <if test="candidateRoles != null &amp;&amp; candidateRoles.size() &gt; 0">
	            (
	            I.GROUP_TYPE_  = 'roles' 
	            and  I.GROUP_ID_ IN
	            <foreach item="role" index="index" collection="candidateRoles" 
	                     open="(" separator="," close=")">
	              #{role}
	            </foreach>
	            )
	          </if>
	           <if test="candidateUser != null &amp;&amp; candidateDepartment != null ">
	            or
	          </if>
	          <if test="candidateDepartment != null">
	            (
	            I.GROUP_TYPE_  = 'departments' 
	            and I.GROUP_ID_ = #{candidateDepartment}
	            )
	          </if>
	          <!-- Since any user can sign off anytime, we check if user id also there to get in waiting list  -->
	          <if test="candidateUser != null">
	           OR I.USER_ID_ = #{candidateUser}          
	      	  </if> 
        	)
         </if> 
      )    
    </where>    
  </sql>
  
  <sql id="executionVariableOperator">
    <choose>
      <when test="var.operator.equals('EQUALS')">=</when>
      <when test="var.operator.equals('EQUALS_IGNORE_CASE')">=</when>
      <when test="var.operator.equals('NOT_EQUALS')">&lt;&gt;</when>
      <when test="var.operator.equals('NOT_EQUALS_IGNORE_CASE')">&lt;&gt;</when>
      <when test="var.operator.equals('GREATER_THAN')">&gt;</when>
      <when test="var.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</when>
      <when test="var.operator.equals('LESS_THAN')">&lt;</when>
      <when test="var.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</when>
   </choose>
  </sql>  

  <select id="selectTaskByNativeQuery" parameterType="java.util.Map" resultMap="taskResultMap">
    ${sql}
  </select>

  <select id="selectTaskCountByNativeQuery" parameterType="java.util.Map" resultType="long">
     ${sql}
  </select>
  
  <select id="selectProcessCreatorTasks" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
	    <!-- Get tasks with identity links having group ids in which user is a member -->
	  	SELECT RES.* from ${prefix}ACT_RU_TASK RES
	    <if test="creator != null">
	      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
	    </if>
	   
	    <where> 
		       I.TYPE_ = #{identityType} and I.USER_ID_ = #{creator} and RES.SUSPENSION_STATE_ = '3'
	    </where>    
  </select>
  
 
  
  <select id="selectProcessedUserTasks" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
	    <!-- Get tasks with identity links having group ids in which user is a member -->
	  	SELECT RES.* from ${prefix}ACT_RU_TASK RES
	    <if test="processedUser != null">
	      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
	    </if>
	   
	    <where> 
		       I.TYPE_ = #{identityType} and I.USER_ID_ = #{processedUser} AND RES.SUSPENSION_STATE_ = 1 
	    </where>    
  </select>
  
  <select id="selectIntegratedMyOwnedTasks" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
	    <!-- Get tasks with identity links having group ids in which user is a member -->
	  	SELECT RES.*,
	  	(SELECT CONCAT(users.first_name ,' ', users.last_name )
   	 	FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) as START_USER_ID_
		 from ${prefix}ACT_RU_TASK RES
	  	inner join ${prefix}ACT_HI_PROCINST PRO on PRO.ID_ = RES.PROC_INST_ID_
		    <if test="candidateUser != null">
		      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
		     <where> 
			       I.TYPE_ = #{identityType} 
			       and I.USER_ID_ = #{candidateUser} 
			       and I.TYPE_ = 'workflowadministrator'
			       and RES.SUSPENSION_STATE_ IN ('1','2','3')
			       and PRO.IS_DRAFT_ != 1
		    </where>  
		    </if>
		 <if test="candidateUser == null">
		 inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
			WHERE RES.SUSPENSION_STATE_ IN ('1','2','3')
			 and PRO.IS_DRAFT_ != 1
			and I.TYPE_ = 'workflowadministrator'
			 GROUP BY RES.ID_
		</if>
		    
  </select>
  
   <select id="selectIntegratedDoneCreator" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
	    <!-- Get tasks with identity links having group ids in which user is a member -->
	  	SELECT RES.*,PRO.START_USER_ID_ from ${prefix}ACT_RU_TASK RES
	  	INNER JOIN ${prefix}ACT_HI_PROCINST PRO ON PRO.ID_ = RES.PROC_INST_ID_
	  	inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_
<!-- 		    <if test="creator != null"> -->
	      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
	      LEFT JOIN ${prefix}RE_INSTANCE_AUDIT OPERATINGFUNCTIONAUDIT ON OPERATINGFUNCTIONAUDIT.taskid = RES.ID_
	     <where> 
		       I.TYPE_ = #{identityType} and I.USER_ID_ = #{creator} AND 
                      IF(OPERATINGFUNCTIONAUDIT.createdby IS NULL,TRUE,OPERATINGFUNCTIONAUDIT.createdby != #{creator})
		       <if test="classificationId != null">
					AND D.CLASSIFICATION_ID_= #{classificationId}
		  		 </if> 
		     <!--   <if test="identityType != null">
		      		and (SELECT count(*) from ${prefix}ACT_RU_IDENTITYLINK identity where  identity.USER_ID_ = #{creator}  and identity.TASK_ID_ = I.TASK_ID_ and (identity.TYPE_ = 'organizer' OR identity.TYPE_ = 'coordinator') ) = 0 
		      </if>  -->
	    </where>  
<!-- 		    </if> -->
  </select>
  
  <select id="selectIntegratedDoneProcessedUser" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
	    <!-- Get tasks with identity links having group ids in which user is a member -->
	  	SELECT RES.* from ${prefix}ACT_RU_TASK RES
		    <if test="processedUser != null">
		      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
		     <where> 
			       I.TYPE_ = #{identityType} and I.USER_ID_ = #{processedUser} AND RES.SUSPENSION_STATE_ = 1  
			       <if test="identityType != null">
			      		and (SELECT count(*) from ${prefix}ACT_RU_IDENTITYLINK identity where  identity.USER_ID_ = #{processedUser}  and identity.TASK_ID_ = I.TASK_ID_ and (identity.TYPE_ = 'organizer' OR identity.TYPE_ = 'coordinator') ) = 0 
			      </if> 
		    </where>  
		    </if>
  </select>
  
<select id="getMyBucketGridData" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap"> 
 	SELECT 
   	RES.* , (SELECT users.full_name FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner 
	FROM 
	${prefix}ACT_RU_TASK RES ,
	${prefix}ACT_RU_IDENTITYLINK I,
	${prefix}ACT_RE_PROCDEF D ,
	${prefix}ACT_HI_PROCINST PRO  
    <where>
    	RES.ID_ = I.TASK_ID_  
	AND 
		RES.PROC_DEF_ID_ = D.ID_  
	AND 
		RES.PROC_INST_ID_ = PRO.ID_
	AND 

	<if test="classificationId != null">
	D.CLASSIFICATION_ID_='document_management' and
	</if>
	
   	<if test="suspensionState != null">
    	(RES.SUSPENSION_STATE_ = 1 OR RES.SUSPENSION_STATE_ =  #{suspensionState.stateCode})
    </if> 
    
   	<if test="suspensionState == null">
   		RES.SUSPENSION_STATE_ = 1
    </if> 
    	AND (I.TYPE_ = 'organizer' || I.TYPE_ = 'coordinator' || I.TYPE_ = 'processeduser')
    	AND 
    	IF(
    		((SELECT COUNT(*) from ${prefix}ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer' AND OPERATION_TYPE_ = 'collaborativeoperation') > 0 &amp;&amp; RES.SIGN_OFF_TYPE_ !=2) || 
    			IF(I.TYPE_ = 'organizer',RES.sign_off_type_ = 3,FALSE) ,
    		I.ORDER_ = (SELECT MIN(ORDER_) from ${prefix}ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer' ),
    		TRUE
    	)

	    AND (
	    
   		<if test="candidateUser != null">
			I.USER_ID_ = #{candidateUser}
		</if>
		
		<if test="candidateGroups.size() &gt; 0  || candidateRoles.size() &gt; 0 || candidateDepartment != null">
	    	<if test="candidateUser != null">
	    	OR
	    	</if>
	    	
	  		<if test="candidateGroups.size() &gt; 0">
            (
            I.GROUP_TYPE_  = 'groups' 
            and I.GROUP_ID_ IN
	            <foreach item="group" index="index" collection="candidateGroups" open="(" separator="," close=")">#{group}</foreach>
            )
         	</if>
         	
	        <if test="candidateGroups.size() &gt; 0 &amp;&amp; candidateRoles.size() &gt; 0">
	        OR
	        </if>
	        
	        <if test="candidateRoles.size() &gt; 0">
            (
            I.GROUP_TYPE_  = 'roles' 
            and  I.GROUP_ID_ IN
	            <foreach item="role" index="index" collection="candidateRoles" open="(" separator="," close=")">#{role}</foreach>
            )
	        </if>
	        
	        <if test="(candidateGroups.size() &gt; 0 || candidateRoles.size() &gt; 0) &amp;&amp; candidateDepartment != null ">
	        OR
	        </if>
	        
	        <if test="candidateDepartment != null">
            (
            I.GROUP_TYPE_  = 'departments' 
            and I.GROUP_ID_ = #{candidateDepartment}
            )
	        </if>
 		</if>
  		)
  	</where>
  	GROUP BY RES.ID_ DESC
  	<if test="dataLimit &gt; 0">
		LIMIT #{dataLimit}
	</if>
</select>
  
<select id="getMyBucketGridData_oracle" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap"> 
 	SELECT 
   		RES.* , (SELECT users.full_name FROM ETEC_USER users  WHERE PRO.START_USER_ID_ = users.id ) owner 
	FROM 
		${prefix}ACT_RU_TASK RES ,
		${prefix}ACT_RU_IDENTITYLINK I,
		${prefix}ACT_RE_PROCDEF D ,
		${prefix}ACT_HI_PROCINST PRO  
    <where>
    	RES.ID_ = I.TASK_ID_  
		AND 
			RES.PROC_DEF_ID_ = D.ID_  
		AND 
			RES.PROC_INST_ID_ = PRO.ID_
		AND 
		
		<if test="classificationId != null">
			D.CLASSIFICATION_ID_='document_management' and
		</if>
		
    	<if test="suspensionState != null">
	    	(RES.SUSPENSION_STATE_ = 1 OR RES.SUSPENSION_STATE_ =  #{suspensionState.stateCode})
	    </if>
	    
    	<if test="suspensionState == null">
    		RES.SUSPENSION_STATE_ = 1
	    </if>
	    
		AND (I.TYPE_ = 'organizer' OR I.TYPE_ = 'coordinator' OR I.TYPE_ = 'processeduser')

		AND (I.TYPE_ = 'organizer' OR RES.sign_off_type_ = 3 OR I.ORDER_ = (SELECT MIN(ORDER_) from ETEC_ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer'))
		
		AND (I.TYPE_ = 'organizer' OR I.OPERATION_TYPE_ = 'collaborativeoperation' OR RES.SIGN_OFF_TYPE_ != 2  AND I.ORDER_ = (SELECT MIN(ORDER_) from ETEC_ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer'))		

		AND (
    		<if test="candidateUser != null">
				I.USER_ID_ = #{candidateUser}
			</if>
			
			<if test="candidateGroups.size() &gt; 0  || candidateRoles.size() &gt; 0 || candidateDepartment != null">
	    		<if test="candidateUser != null">
	    		OR
	    		</if>
	    		
	  			<if test="candidateGroups.size() &gt; 0">
	            (
	            I.GROUP_TYPE_  = 'groups' 
	            and I.GROUP_ID_ IN
		            <foreach item="group" index="index" collection="candidateGroups" open="(" separator="," close=")">#{group}</foreach>
	            )
	         	</if>
	         	
	         	<if test="candidateGroups.size() &gt; 0 &amp;&amp; candidateRoles.size() &gt; 0">
	            OR
	        	</if>
	        	
	          	<if test="candidateRoles.size() &gt; 0">
	            (
	            I.GROUP_TYPE_  = 'roles' 
	            and  I.GROUP_ID_ IN
		            <foreach item="role" index="index" collection="candidateRoles" open="(" separator="," close=")">#{role}</foreach>
	            )
	          	</if>
	          	
	           	<if test="(candidateGroups.size() &gt; 0 || candidateRoles.size() &gt; 0) &amp;&amp; candidateDepartment != null ">
	            OR
	          	</if>
	          	
	         	<if test="candidateDepartment != null">
	            (
	            I.GROUP_TYPE_  = 'departments' 
	            and I.GROUP_ID_ = #{candidateDepartment}
	            )
	          	</if>
		</if>
		)
	</where>
</select>
  
<select id="getMyBucketGridData_mssql" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap"> 
 	SELECT 
 	DISTINCT 
 	<if test="dataLimit &gt; 0">
		TOP (#{dataLimit})
	</if>
	RES.ID_,
   	RES.* ,
   	(SELECT CONCAT(users.first_name ,' ', users.last_name )
   	 FROM ETEC_USER AS users  WHERE PRO.START_USER_ID_ = users.id ) AS owner 
	FROM 
	 ${prefix}ACT_RU_TASK RES ,
	 ${prefix}ACT_RU_IDENTITYLINK I,
	 ${prefix}ACT_RE_PROCDEF D ,
 	 ${prefix}ACT_HI_PROCINST PRO  
    <where>
    	RES.ID_ = I.TASK_ID_  
AND 
	RES.PROC_DEF_ID_ = D.ID_  
AND 
	RES.PROC_INST_ID_ = PRO.ID_
AND 

<if test="classificationId != null">
	D.CLASSIFICATION_ID_='document_management' and
	</if>
    	<if test="suspensionState != null">
	    	(RES.SUSPENSION_STATE_ = 1 OR RES.SUSPENSION_STATE_ =  #{suspensionState.stateCode})
	    </if> 
    	<if test="suspensionState == null">
    		RES.SUSPENSION_STATE_ = 1
	    </if> 
		AND (I.TYPE_ = 'organizer' OR I.TYPE_ = 'coordinator' OR I.TYPE_ = 'processeduser')

		AND (I.TYPE_ = 'organizer' OR RES.sign_off_type_ = 3 OR I.ORDER_ = (SELECT MIN(ORDER_) from ETEC_ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer'))
		
		AND (I.TYPE_ = 'organizer' OR I.OPERATION_TYPE_ = 'collaborativeoperation' OR RES.SIGN_OFF_TYPE_ != 2  AND I.ORDER_ = (SELECT MIN(ORDER_) from ETEC_ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer'))		

		AND (
    		<if test="candidateUser != null">
				I.USER_ID_ = #{candidateUser}
			</if>
			<if test="candidateGroups.size() &gt; 0  || candidateRoles.size() &gt; 0 || candidateDepartment != null">
		    		<if test="candidateUser != null">
		    		OR
		    		</if>
		  			<if test="candidateGroups.size() &gt; 0">
		            (
		            I.GROUP_TYPE_  = 'groups' 
		            and I.GROUP_ID_ IN
			            <foreach item="group" index="index" collection="candidateGroups" 
			                     open="(" separator="," close=")">
			              #{group}
			            </foreach>
		            )
		         	</if>
		           <if test="candidateGroups.size() &gt; 0 &amp;&amp; candidateRoles.size() &gt; 0">
		            OR
		          </if>
		          <if test="candidateRoles.size() &gt; 0">
		            (
		            I.GROUP_TYPE_  = 'roles' 
		            and  I.GROUP_ID_ IN
			            <foreach item="role" index="index" collection="candidateRoles" 
			                     open="(" separator="," close=")">
			              #{role}
			            </foreach>
		            )
		          </if>
		           <if test="(candidateGroups.size() &gt; 0 || candidateRoles.size() &gt; 0) &amp;&amp; candidateDepartment != null ">
		            OR
		          </if>
		          <if test="candidateDepartment != null">
		            (
		            I.GROUP_TYPE_  = 'departments' 
		            and I.GROUP_ID_ = #{candidateDepartment}
		            )
		          </if>
  			</if>
  		)
  	</where>
  </select>
  
    
  <select id="getCancelDocumentData_mysql" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap"> 
 	SELECT 
   	RES.* ,
   	   	(SELECT CONCAT(users.first_name ,' ', users.last_name )
   	 FROM ETEC_USER AS users  WHERE I.USER_ID_ = users.id ) AS owner 
	FROM 
	 ${prefix}ACT_RU_TASK RES ,
	 ${prefix}ACT_RU_IDENTITYLINK I,
	 ${prefix}ACT_RE_PROCDEF D,
	 ${prefix}RE_INSTANCE_AUDIT OA
 
    <where>
    	RES.ID_ = I.TASK_ID_  
	AND 
		RES.PROC_DEF_ID_ = D.ID_  
	AND 
		RES.PROC_INST_ID_ = OA.process_id 
	AND 
		OA.operation_type = 'withdraw' and
	<if test="classificationId != null">
		D.CLASSIFICATION_ID_='document_management' 
	</if>
<!--     	<if test="suspensionState != null"> -->
<!-- 	    	(RES.SUSPENSION_STATE_ = 1 OR RES.SUSPENSION_STATE_ =  #{suspensionState.stateCode}) -->
<!-- 	    </if>  -->
<!--     	<if test="suspensionState == null"> -->
<!--     		RES.SUSPENSION_STATE_ = 1 -->
<!-- 	    </if>  -->
    	AND (I.TYPE_ = 'organizer' OR I.TYPE_ = 'coordinator' OR I.TYPE_ = 'processeduser')
    	AND 
    	IF(((SELECT COUNT(*) from ${prefix}ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer' AND OPERATION_TYPE_ = 'collaborativeoperation') > 0 &amp;&amp; RES.SIGN_OFF_TYPE_ !=2) OR RES.SIGN_OFF_TYPE_ = 3,
    		I.ORDER_ = (SELECT MIN(ORDER_) from ${prefix}ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer' ),
    		TRUE)
	    AND (
    		<if test="candidateUser != null">
				I.USER_ID_ = #{candidateUser}
			</if>
			<if test="candidateGroups.size() &gt; 0  || candidateRoles.size() &gt; 0 || candidateDepartment != null">
		    		<if test="candidateUser != null">
		    		OR
		    		</if>
		  			<if test="candidateGroups.size() &gt; 0">
		            (
		            I.GROUP_TYPE_  = 'groups' 
		            and I.GROUP_ID_ IN
			            <foreach item="group" index="index" collection="candidateGroups" 
			                     open="(" separator="," close=")">
			              #{group}
			            </foreach>
		            )
		         	</if>
		           <if test="candidateGroups.size() &gt; 0 &amp;&amp; candidateRoles.size() &gt; 0">
		            OR
		          </if>
		          <if test="candidateRoles.size() &gt; 0">
		            (
		            I.GROUP_TYPE_  = 'roles' 
		            and  I.GROUP_ID_ IN
			            <foreach item="role" index="index" collection="candidateRoles" 
			                     open="(" separator="," close=")">
			              #{role}
			            </foreach>
		            )
		          </if>
		           <if test="(candidateGroups.size() &gt; 0 || candidateRoles.size() &gt; 0) &amp;&amp; candidateDepartment != null ">
		            OR
		          </if>
		          <if test="candidateDepartment != null">
		            (
		            I.GROUP_TYPE_  = 'departments' 
		            and I.GROUP_ID_ = #{candidateDepartment}
		            )
		          </if>
  			</if>
  		)
  	</where>
  	GROUP BY RES.ID_ DESC
  </select>
  
   <select id="getCancelDocumentData" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap"> 
 	SELECT DISTINCT RES.ID_,
   	RES.* ,
   	   	(SELECT users.full_name FROM ETEC_USER users WHERE I.USER_ID_ = users.id) AS owner 
	FROM 
	 ${prefix}ACT_RU_TASK RES ,
	 ${prefix}ACT_RU_IDENTITYLINK I,
	 ${prefix}ACT_RE_PROCDEF D,
	 ${prefix}RE_INSTANCE_AUDIT OA
 
    <where>
    	RES.ID_ = I.TASK_ID_  
AND 
	RES.PROC_DEF_ID_ = D.ID_  
AND 
RES.PROC_INST_ID_ = OA.process_id 
and 
OA.operation_type = 'withdraw' and
<if test="classificationId != null">
	D.CLASSIFICATION_ID_='document_management' 
	</if>
		AND (I.TYPE_ = 'organizer' OR I.TYPE_ = 'coordinator' OR I.TYPE_ = 'processeduser')
		AND (I.TYPE_ = 'organizer' OR RES.sign_off_type_ = 3 OR I.ORDER_ = (SELECT MIN(ORDER_) from ETEC_ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer'))
		AND (I.TYPE_ = 'organizer' OR I.OPERATION_TYPE_ = 'collaborativeoperation' OR RES.SIGN_OFF_TYPE_ != 2  AND I.ORDER_ = (SELECT MIN(ORDER_) from ETEC_ACT_RU_IDENTITYLINK WHERE TASK_ID_ = I.TASK_ID_ AND TYPE_  = 'organizer'))		
		AND (
    		<if test="candidateUser != null">
				I.USER_ID_ = #{candidateUser}
			</if>
			<if test="candidateGroups.size() &gt; 0  || candidateRoles.size() &gt; 0 || candidateDepartment != null">
		    		<if test="candidateUser != null">
		    		OR
		    		</if>
		  			<if test="candidateGroups.size() &gt; 0">
		            (
		            I.GROUP_TYPE_  = 'groups' 
		            and I.GROUP_ID_ IN
			            <foreach item="group" index="index" collection="candidateGroups" 
			                     open="(" separator="," close=")">
			              #{group}
			            </foreach>
		            )
		         	</if>
		           <if test="candidateGroups.size() &gt; 0 &amp;&amp; candidateRoles.size() &gt; 0">
		            OR
		          </if>
		          <if test="candidateRoles.size() &gt; 0">
		            (
		            I.GROUP_TYPE_  = 'roles' 
		            and  I.GROUP_ID_ IN
			            <foreach item="role" index="index" collection="candidateRoles" 
			                     open="(" separator="," close=")">
			              #{role}
			            </foreach>
		            )
		          </if>
		           <if test="(candidateGroups.size() &gt; 0 || candidateRoles.size() &gt; 0) &amp;&amp; candidateDepartment != null ">
		            OR
		          </if>
		          <if test="candidateDepartment != null">
		            (
		            I.GROUP_TYPE_  = 'departments' 
		            and I.GROUP_ID_ = #{candidateDepartment}
		            )
		          </if>
  			</if>
  		)
  	</where>
  </select>
  
  
 <select id="selectReturnedStartNode" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="startNodeResultMap">
		SELECT RES.START_ACT_ID_,RES.PROC_DEF_ID_,RES.START_TIME_,RES.PROC_INST_ID_,RES.START_NODE_NAME,RES.START_USER_ID_ FROM ${prefix}ACT_HI_PROCINST RES
		INNER JOIN ${prefix}ACT_RE_PROCDEF  PROCDEF
		ON  RES.PROC_DEF_ID_ =  PROCDEF.ID_ 
		INNER JOIN  ${prefix}ACT_RU_IDENTITYLINK IDENTITYLINK
		ON IDENTITYLINK.PROC_INS_ID_ = RES.PROC_INST_ID_
		WHERE (PROCDEF.has_start_form_key_ = TRUE  OR PROCDEF.is_system_defined_ =TRUE)
		<if test="candidateUser != null">
		AND (SELECT COUNT(IDENTITY.ID_) FROM ${prefix}ACT_HI_TASKINST TASKINST ,${prefix}ACT_HI_IDENTITYLINK IDENTITY WHERE TASKINST.ID_ = IDENTITY.TASK_ID_ AND 
IDENTITY.TYPE_ = 'workflowadministrator' AND TASKINST.PROC_INST_ID_= RES.PROC_INST_ID_ AND IDENTITY.USER_ID_ = #{candidateUser}) >= 1
		</if>
  </select>
  
  <select id="selectReturnedStartNodeForMyBucket" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="startNodeResultMap">
		SELECT RES.START_ACT_ID_,RES.PROC_DEF_ID_,RES.START_TIME_,RES.PROC_INST_ID_,RES.START_NODE_NAME,RES.START_USER_ID_ FROM ${prefix}ACT_HI_PROCINST RES 
		INNER JOIN ${prefix}ACT_RE_PROCDEF  PROCDEF
		ON  RES.PROC_DEF_ID_ =  PROCDEF.ID_ 
		LEFT JOIN  ${prefix}ACT_RU_IDENTITYLINK IDENTITYLINK
		ON IDENTITYLINK.PROC_INS_ID_ = RES.PROC_INST_ID_
		LEFT JOIN   ${prefix}RE_INSTANCE_AUDIT AUDIT 
		ON AUDIT.taskid = RES.PROC_INST_ID_
		WHERE 
		(PROCDEF.has_start_form_key_ = TRUE  OR PROCDEF.is_system_defined_ =TRUE) 
		AND IF(AUDIT.operation_type IS NULL,TRUE,AUDIT.operation_type != 'terminate' AND AUDIT.operation_type != 'suspend')
		AND IF(RES.IS_DRAFT_ IS TRUE,IF(RES.START_USER_ID_ = #{candidateUser},TRUE,FALSE),IDENTITYLINK.USER_ID_ = #{candidateUser})  
		<if test="dataLimit &gt; 0">
			LIMIT #{dataLimit}
		</if>
  </select>
  
    <select id="getWorkFlowTraceData" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="workFlowTraceResultMap">
	SELECT
	ETEC_RE_INSTANCE_AUDIT.id ,
 	CASE WHEN ETEC_RE_INSTANCE_AUDIT.operation_type = 'return submit' THEN 'submit' ELSE ETEC_RE_INSTANCE_AUDIT.operation_type END AS operationType, 
  	CASE WHEN  ETEC_RE_INSTANCE_AUDIT.createdby = 'autoUpdate' THEN 'autoUpdate' ELSE (SELECT users.full_name FROM ETEC_USER users  WHERE ETEC_RE_INSTANCE_AUDIT.createdby = users.id ) END AS createdby,  
	ETEC_RE_INSTANCE_AUDIT.created_time AS createdtime,ETEC_ACT_HI_TASKINST.NAME_ AS nodeName
	FROM
	ETEC_RE_INSTANCE_AUDIT 
	INNER JOIN ETEC_ACT_HI_TASKINST  ON ETEC_ACT_HI_TASKINST.ID_ = ETEC_RE_INSTANCE_AUDIT.taskid
	INNER JOIN ETEC_ACT_HI_PROCINST  ON ETEC_RE_INSTANCE_AUDIT.process_id = ETEC_ACT_HI_PROCINST.PROC_INST_ID_ 
	WHERE ETEC_RE_INSTANCE_AUDIT.process_id = #{processInstanceId}
    <if test="processDefinitionId != null">
         AND ETEC_RE_INSTANCE_AUDIT.processDefinitionId = #{processDefinitionId}
	</if>
	ORDER BY created_time ASC 
	
    
<!-- 		SELECT PROC_INST_ID_ AS id,"create" AS operationType,START_USER_ID_ AS createdby,START_TIME_ AS createdtime,START_NODE_NAME AS nodeName
		FROM ${prefix}ACT_HI_PROCINST AS PROCINST
		INNER JOIN ${prefix}RE_INSTANCE_AUDIT AUDIT ON  AUDIT.process_id = PROCINST.PROC_INST_ID_  WHERE PROCINST.PROC_INST_ID_ = #{processInstanceId}
		GROUP BY PROCINST.PROC_INST_ID_
		UNION ALL
		(SELECT AUDIT.id AS id,AUDIT.operation_type AS operationType,AUDIT.createdby AS createdby,AUDIT.created_time AS createdtime,TASK.NAME_ AS nodeName
		FROM ${prefix}ACT_HI_TASKINST TASK INNER JOIN ${prefix}RE_INSTANCE_AUDIT AUDIT ON TASK.ID_ = AUDIT.taskid WHERE PROC_INST_ID_ = #{processInstanceId}
		ORDER BY TASK.ID_) -->
  </select>
  

  
  <select id="getAllTimeSettingTasks" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
		SELECT RES.*
        FROM ${prefix}ACT_RU_TASK RES WHERE SUSPENSION_STATE_ = 1 AND (URGE_TIMES > 0 OR LAST_URGED_TIME IS NOT NULL);
  </select>
  
  <select id="findExecutionByProcessInstanceId" parameterType="org.activiti.engine.impl.persistence.entity.TaskEntity" resultMap="taskResultMap">
    select * from ${prefix}ACT_RU_TASK
    where PROC_INST_ID_ = #{parameter}
  </select>    
  
</mapper>