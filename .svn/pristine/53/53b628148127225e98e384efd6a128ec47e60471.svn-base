/** * Copyright (c) 2006 * Martin Czuchra, Nicolas Peters, Daniel Polak, Willi Tscheschner, Philipp Berger * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if (!ORYX.Plugins)     ORYX.Plugins = new Object();ORYX.Plugins.Save = ORYX.Plugins.AbstractPlugin.extend({	    facade: undefined,    processURI: undefined,	    construct: function(facade){		this.facade = facade;				this.facade.offer({			'name': ORYX.I18N.Save.save,			'functionality': this.save.bind(this,false),			'group': ORYX.I18N.Save.group,			'icon': ORYX.PATH + "images/disk.png",			'description': ORYX.I18N.Save.saveDesc,			'index': 1,			'minShape': 0,			'maxShape': 0		});		/*this.facade.offer({			'name': ORYX.I18N.Save.saveAs,			'functionality': this.save.bind(this,true),			'group': ORYX.I18N.Save.group,			'icon': ORYX.PATH + "images/disk_multi.png",			'description': ORYX.I18N.Save.saveAsDesc,			'index': 2,			'minShape': 0,			'maxShape': 0		});*/				this.facade.offer({			'id' : "sourceClick",			'name': "source",			'functionality': this.showSource.bind(this,false),			'group': ORYX.I18N.Save.group,			'icon': ORYX.PATH + "images/source.png",			'description': "source view",			'index': 3,			'minShape': 0,			'maxShape': 0		});				window.onbeforeunload = this.onUnLoad.bind(this);			this.changeDifference = 0;				// Register on event for executing commands --> store all commands in a stack		 		// --> Execute		this.facade.registerOnEvent(ORYX.CONFIG.EVENT_UNDO_EXECUTE, function(){ this.changeDifference++ }.bind(this) );		this.facade.registerOnEvent(ORYX.CONFIG.EVENT_EXECUTE_COMMANDS, function(){ this.changeDifference++ }.bind(this) );		// --> Rollback		this.facade.registerOnEvent(ORYX.CONFIG.EVENT_UNDO_ROLLBACK, function(){ this.changeDifference-- }.bind(this) );				//TODO very critical for load time performance!!!		//this.serializedDOM = DataManager.__persistDOM(this.facade);	},		onUnLoad: function(){				if( this.changeDifference !== 0 ){					return ORYX.I18N.Save.unsavedData;					}						},				saveSynchronously: function(forceNew){            	// remove if fullscreen mode is exist		toggleFullscreenProcessEditor('save_process');    			// Reset changes		this.changeDifference = 0;		var reqURI ='';				var currentURL = document.URL;		var locationSlice = currentURL.split("?");				if (this.processURI) {			reqURI = this.processURI;		}		else {			//commented by rajasekar			//if(!location.hash.slice(1)){				reqURI= "/bpm/process/processCreate";			//}			//else{			//	reqURI = '/backend/poem/'+(location.hash.slice(1).replace(/^\/?/,"").replace(/\/?$/,""))+"/self";			//}		}		//commented by rajasekar		// If the  current url is the API-URL, try to find out the needed one.		/* if( reqURI.endsWith("/api") || reqURI.include("/api?") ){			// Parse params			var params = {};			window.location.search.slice(1).split("&").each(function(param){ params[param.split("=")[0]]=param.split("=")[1]})						// If there is model in param, take this			if(  params.model ){				reqURI = window.location.href.split("/api")[0] + params.model + "/self";			// If not, force to get a new one			} else {				forceNew = true;			}		}*/				if(forceNew){			var ss 		= this.facade.getStencilSets();			var source 	= ss[ss.keys()[0]].source().split('stencilsets')[1];				reqURI = '/backend/poem' + ORYX.CONFIG.ORYX_NEW_URL + "?stencilset=/stencilsets" + source ;				}		// Get the serialized svg image source        var svgClone 	= this.facade.getCanvas().getSVGRepresentation(true);        var svgDOM 		= DataManager.serialize(svgClone);		this.serializedDOM = Ext.encode(this.facade.getJSON());						if (!locationSlice[1]) {			// Check if this is the NEW URL			if( reqURI.include( ORYX.CONFIG.ORYX_NEW_URL ) ){				//alert("if======"+ ORYX.CONFIG.ORYX_NEW_URL);				// Get the stencilset				var ss = this.facade.getStencilSets().values()[0]							// Define Default values				var defaultData = {title:ORYX.I18N.Save.newProcess, summary:'', type:ss.title(), url: reqURI, namespace: ss.namespace() }				//alert("ss=="+ss+"==defaultData=="+defaultData);				// Create a Template				/*var dialog = new Ext.XTemplate(									// TODO find some nice words here -- copy from above ;)							'<form class="oryx_repository_edit_model" action="#" id="edit_model" onsubmit="return false;">',																			'<fieldset>',									'<p class="description">' + ORYX.I18N.Save.dialogDesciption + '</p>',									'<input type="hidden" name="namespace" value="{namespace}" />',									'<p><label for="edit_model_title">' + ORYX.I18N.Save.dialogLabelTitle + '</label><input type="text" class="text" name="title" value="{title}" id="edit_model_title" onfocus="this.className = \'text activated\'" onblur="this.className = \'text\'"/></p>',									'<p><label for="edit_model_summary">' + ORYX.I18N.Save.dialogLabelDesc + '</label><textarea rows="5" name="summary" id="edit_model_summary" onfocus="this.className = \'activated\'" onblur="this.className = \'\'">{summary}</textarea></p>',									'<!-- <p><label for="edit_model_type">' + ORYX.I18N.Save.dialogLabelType + '</label><input type="text" name="type" class="text disabled" value="{type}" disabled="disabled" id="edit_model_type" /></p> -->',																	'</fieldset>',														'</form>')*/				var classificationStore = new Ext.data.Store ({					autoLoad: true,					proxy: new Ext.data.HttpProxy({					url:'/process/getAllClassifications'}),					reader: new Ext.data.JsonReader({ root: 'classifications'},[{ name: 'id' }, { name: 'name'}])				})								var processFormPanel = new Ext.Panel({					labelAlign: 'right',					title: ORYX.I18N.Save.dialogDesciption,					width: 450,					bodyStyle:'padding:5px 5px 0 0',				    items:[{						xtype: 'form',						monitorValid:true,						id: 'processForm',						name : 'processForm',						layout: 'form',						border:false,						items: [{							    xtype:'textfield',								fieldLabel: ORYX.I18N.Save.dialogLabelName+'<span style="color: rgb(255, 0, 0); padding-left: 2px;">* </span>',								name: 'title',								allowBlank: false,								labelStyle: 'font-weight:bold;',								regex: /^[A-Za-z\u4e00-\u9eff\.][A-Za-z\' \'\w\u4e00-\u9eff\.][\-a-zA-Z\_\u4e00-\u9eff\s]{1,100}$/,							    anchor:'90%'							}, {							    xtype: 'textarea',								grow: true,								fieldLabel: ORYX.I18N.Save.dialogLabelDesc+' ',								//regex: /^[A-Za-z\u4e00-\u9eff\.][A-Za-z\' \'\w\u4e00-\u9eff\.][\-a-zA-Z\_\u4e00-\u9eff\s]{1,100}$/,								name: 'summary',								labelStyle: 'font-weight:bold;',								anchor:'90%'							}, {							    xtype: 'hidden',								grow: true,								name: 'namespace',								value : ss.namespace()							}, {								xtype: 'combo',								store: classificationStore,								id : 'classification_type',								name : 'classification_type',								fieldLabel : 'Classification <span style="color: rgb(255, 0, 0); padding-left: 2px;">* </span>',								labelStyle: 'font-weight:bold;',								displayField:'name',								valueField: 'id',								allowBlank: false,								typeAhead: true,								mode: 'local',								lazyRender: true,								triggerAction : 'all',								overflow: 'auto',								emptyText : 'Select a Classification...',								selectOnFocus:true,								anchor:'90%',								regex: new RegExp('^[A-Za-z\u4e00-\u9eff\.][A-Za-z \w\u4e00-\u9eff\.]{1,40}$')							}],							buttons:[{																text: ORYX.I18N.Save.saveBtn,									formBind:true,									handler: function(){										//callback( $('edit_model') )											callback()									}								},{									text: ORYX.I18N.Save.close,									handler: function(){								       this.facade.raiseEvent({									    type: ORYX.CONFIG.EVENT_LOADING_DISABLE									});								    	win.destroy();									}.bind(this)								}]						}]						})								// Create the callback for the template				callback = function(form){					this.mask = new Ext.LoadMask(Ext.getBody(), {msg:ORYX.I18N.Oryx.pleaseWait});					this.mask.show();						/*	var title 		= form.elements["title"].value.strip();					title 			= title.length == 0 ? defaultData.title : title;					//alert("===title=="+title+"==defaultData.title=="+defaultData.title+"==title=="+title);					//added changing title of page after first save					window.document.title = title + " - Oryx";										var summary = form.elements["summary"].value.strip();						summary 	= summary.length == 0 ? defaultData.summary : summary;										var namespace	= form.elements["namespace"].value.strip();					namespace		= namespace.length == 0 ? defaultData.namespace : namespace;*/										var processForm = Ext.getCmp('processForm').getForm();										var title 		= processForm.findField("title").getValue().strip();					title 			= title.length == 0 ? defaultData.title : title;					//alert("===title=="+title+"==defaultData.title=="+defaultData.title+"==title=="+title);					//added changing title of page after first save					window.document.title = title + " - Oryx";										var summary = processForm.findField("summary").getValue().strip();						summary 	= summary.length == 0 ? defaultData.summary : summary;					var classification_type_value = processForm.findField("classification_type").getRawValue().strip();										var classification_type = processForm.findField("classification_type").getValue().strip();										if(classification_type.length == 0){						classification_type = classification_type_value;					}else if(classification_type.length > 0 && classification_type_value.length > 0){						var temp_type = classification_type_value.toLowerCase().replace(/[" "]/g,"_");						if(classification_type == temp_type){							classification_type_value = "";											}					}												classification_type = classification_type_value.length == 0 ?  classification_type : classification_type_value;												var namespace	= processForm.findField("namespace").getValue().strip();					namespace		= namespace.length == 0 ? defaultData.namespace : namespace;									/*					if(title.length == 0 && classification_type.length == 0){						Ext.Msg.alert('Message', 'Title and Classification are mandatory.');					}*/					win.destroy();										// Send the request out					this.sendSaveRequest( reqURI, { data: this.serializedDOM, svg: svgDOM, title: title, summary: summary, type: namespace, classification_type: classification_type,designMode:"create" }, forceNew,this.mask);									}.bind(this);								// Create a new window								win = new Ext.Window({					id:		'Propertie_Window',			        width:	'auto',			        height:	'auto',			        title:	forceNew ? ORYX.I18N.Save.saveAsTitle : ORYX.I18N.Save.save,			        modal:	true,					bodyStyle: 'background:#FFFFFF',			        //html: 	dialog.apply( defaultData ),					items : processFormPanel,					/*buttons:[{						text: ORYX.I18N.Save.saveBtn,						handler: function(){							//callback( $('edit_model') )								callback()						}					},{			        	text: ORYX.I18N.Save.close,			        	handler: function(){			               this.facade.raiseEvent({			                    type: ORYX.CONFIG.EVENT_LOADING_DISABLE			                });			            	win.destroy();			        	}.bind(this)					}]*/			    });				/*Ext.Msg.show({					   title:'Information',					   msg: "Default Name  will be assigned for tasks that has empty names.",					   buttons: Ext.Msg.OKCANCEL,					   fn: confirmDefaultTaskName,					   animEl: 'elId',					   icon: Ext.MessageBox.INFO					});*/					win.show();												} else {				// Send the request out				this.mask = new Ext.LoadMask(Ext.getBody(), {msg:ORYX.I18N.Oryx.pleaseWait});				this.mask.show();				this.sendSaveRequest( reqURI, { data: this.serializedDOM, svg: svgDOM },this.mask );			}		}else{						var classificationStore = new Ext.data.Store ({				autoLoad: false,				proxy: new Ext.data.HttpProxy({				url:'/process/getAllClassifications'}),				reader: new Ext.data.JsonReader({ root: 'classifications'},[{ name: 'id' }, { name: 'name'}])			});			classificationStore.load();			// Get the stencilset			var ss = this.facade.getStencilSets().values()[0]					// Define Default values			var defaultData = {title:ORYX.I18N.Save.newProcess, summary:'', type:ss.title(), url: reqURI, namespace: ss.namespace() }			//alert("ss=="+ss+"==defaultData=="+defaultData);									var title = decodeURIComponent(locationSlice[1].split("&")[2].split("=")[1]);			var summary = decodeURIComponent(locationSlice[1].split("&")[3].split("=")[1]);						var classification_type = decodeURIComponent(locationSlice[1].split("&")[4].split("=")[1]).replace("#","");			var processFormPanel = new Ext.Panel({				labelAlign: 'right',				title: ORYX.I18N.Save.dialogDesciption,				width: 450,				bodyStyle:'padding:5px 5px 0 0',			    items:[{					xtype: 'form',					monitorValid:true,					id: 'processForm',					name : 'processForm',					layout: 'form',					border:false,					items: [{						    xtype:'textfield',							fieldLabel: ORYX.I18N.Save.dialogLabelName+'<span style="color: rgb(255, 0, 0); padding-left: 2px;">* </span>',							name: 'title',							allowBlank: false,							disabled: true,							value:title,							labelStyle: 'font-weight:bold;',							regex: /^[A-Za-z\u4e00-\u9eff\.][A-Za-z\' \'\w\u4e00-\u9eff\.][\-a-zA-Z\_\u4e00-\u9eff\s]{1,100}$/,						    anchor:'90%'						}, {						    xtype: 'textarea',							grow: true,							fieldLabel: ORYX.I18N.Save.dialogLabelDesc+' ',							//regex: /^[A-Za-z\u4e00-\u9eff\.][A-Za-z\' \'\w\u4e00-\u9eff\.][\-a-zA-Z\_\u4e00-\u9eff\s]{1,100}$/,							name: 'summary',							value:summary,							labelStyle: 'font-weight:bold;',							anchor:'90%'						}, {						    xtype: 'hidden',							grow: true,							name: 'namespace',							value : ss.namespace()						}, {							xtype: 'combo',							store: classificationStore,							id : 'classification_type',							name : 'classification_type',							fieldLabel : 'Classification <span style="color: rgb(255, 0, 0); padding-left: 2px;">* </span>',							labelStyle: 'font-weight:bold;',							displayField:'name',							valueField: 'id',							allowBlank: false,							typeAhead: true,							value:classification_type,							mode: 'local',							lazyRender: true,							triggerAction : 'all',							overflow: 'auto',							emptyText : 'Select a Classification...',							selectOnFocus:true,							anchor:'90%',							regex: new RegExp('^[A-Za-z\u4e00-\u9eff\.][A-Za-z \w\u4e00-\u9eff\.]{1,40}$')						}],						buttons:[{														text: ORYX.I18N.Save.saveBtn,								formBind:true,								handler: function(){									callback()								}							},{								text: ORYX.I18N.Save.close,								handler: function(){							       this.facade.raiseEvent({								    type: ORYX.CONFIG.EVENT_LOADING_DISABLE								});							    	win.destroy();								}.bind(this)							}]					}]					})												callback = function(form){				this.mask = new Ext.LoadMask(Ext.getBody(), {msg:ORYX.I18N.Oryx.pleaseWait});				this.mask.show();				var processForm = Ext.getCmp('processForm').getForm();				//added changing title of page after first save				window.document.title = title + " - Oryx";								var summary = processForm.findField("summary").getValue().strip();					summary 	= summary.length == 0 ? defaultData.summary : summary;				var classification_type_value = processForm.findField("classification_type").getRawValue().strip();								var classification_type = processForm.findField("classification_type").getValue().strip();									if(classification_type.length == 0){					classification_type = classification_type_value;				}else if(classification_type.length > 0 && classification_type_value.length > 0){					var temp_type = classification_type_value.toLowerCase().replace(/[" "]/g,"_");					if(classification_type == temp_type){						classification_type_value = "";										}				}										classification_type = classification_type_value.length == 0 ?  classification_type : classification_type_value;														var namespace	= defaultData.namespace;				win.destroy();				// Send the request out				this.sendSaveRequest( reqURI, { data: this.serializedDOM, svg: svgDOM, title: title, summary: summary, type: namespace, classification_type: classification_type,designMode:"edit" }, forceNew,this.mask);							}.bind(this);					win = new Ext.Window({				id:		'Propertie_Window',		        width:	'auto',		        height:	'auto',		        title:	forceNew ? ORYX.I18N.Save.saveAsTitle : ORYX.I18N.Save.save,		        modal:	true,				bodyStyle: 'background:#FFFFFF',				items : processFormPanel,		    });			/*Ext.Msg.show({			   title:'Information',			   msg: "Default Name  will be assigned for tasks that has empty names.",			   buttons: Ext.Msg.OKCANCEL,			  fn: confirmDefaultTaskName,			   animEl: 'elId',			   icon: Ext.MessageBox.INFO			});*/			win.show();						/*						var ss = this.facade.getStencilSets().values()[0]								var defaultData = {title:ORYX.I18N.Save.newProcess, summary:'', type:ss.title(), url: reqURI, namespace: ss.namespace() }			var title = decodeURIComponent(locationSlice[1].split("&")[2].split("=")[1]);									window.document.title = title + " - Oryx";						var summary = decodeURIComponent(locationSlice[1].split("&")[3].split("=")[1]);							var classification_type = decodeURIComponent(locationSlice[1].split("&")[4].split("=")[1]);						classification_type = classification_type.toLowerCase().replace(/["#"]/g,"");						var namespace	= defaultData.namespace;						this.sendSaveRequest( reqURI, { data: this.serializedDOM, svg: svgDOM, title: title, summary: summary, type: namespace, classification_type: classification_type,designMode:"edit" }, forceNew);			*/					}    },		sendSaveRequest: function(url, params, forceNew,loaderMask){		var classification_type = params.classification_type;		// Send the request to the server.		new Ajax.Request(url, {                method: 'POST',                asynchronous: false,                parameters: params,			onSuccess: (function(transport) {				/*var loc = transport.getResponseHeader("location");				if (loc) {					this.processURI = loc;				}				else {					this.processURI = url;				}				var modelUri="/model"+this.processURI.split("model")[1].replace(/self\/?$/i,"");								location.hash="#"+modelUri;*/				//raise saved event				//parent.location.href = "bpm/showProcess/processDefinitions";				//window.top.location = "bpm/showProcess/processDefinitions";				/*if( forceNew ){					var newURLWin = new Ext.Window({						title:		ORYX.I18N.Save.savedAs, 						bodyStyle:	"background:white;padding:10px", 						width:		'auto', 						height:		'auto',						html:"<div style='font-weight:bold;margin-bottom:10px'>"+ORYX.I18N.Save.saveAsHint+"</div><span><a href='" + loc +"' target='_blank'>" + loc + "</a></span>",						buttons:[{text:'Ok',handler:function(){newURLWin.destroy()}}]					});					newURLWin.show();				}*/				/*var gridUrl="/bpm/showProcess/processDefinitions";				new Ajax.Request(gridUrl, {	                method: 'GET',	                asynchronous: false,	                onSuccess: (function(response) {	                	console.log(response);	                	 	$("#target_iframe_div").remove();							$("#target").html("");							$("#target").html(response.responseText);						 	$("#target_div").show();					}).bind(this),					onFailure: (function(response) {										}).bind(this)				});*/								if(transport.responseText == "success"){					this.facade.raiseEvent({						type:ORYX.CONFIG.EVENT_MODEL_SAVED					});					this.facade.raiseEvent({						type:ORYX.CONFIG.EVENT_LOADING_STATUS,						text:ORYX.CONFIG.EVENT_MODEL_SAVED				   });				   loaderMask.hide();					Ext.Msg.show({						   title:'Success',						   msg: ORYX.I18N.PropertyWindow.processSaved,						   buttons: Ext.Msg.OK,						  // fn: processResult,						   animEl: 'elId',						   fn: function(buttonId){				               if(buttonId === 'ok'){				            	   window.top.showProcessList();				               }				           }.bind(this),						   icon: Ext.Msg.INFO						});					//Ext.Msg.alert("Saved", "Process is saved successfully.");				} else {				loaderMask.hide();					//show saved status					this.facade.raiseEvent({							type:ORYX.CONFIG.EVENT_LOADING_STATUS,							text:"Error"					   });					/*Ext.Msg.alert({				    title: "Error",				    content: transport.responseText,				    type: "Error",				    buttons: [{ value: "Ok" }],				});					Ext.Msg.alert("Error",transport.responseText);*/					// Show a dialog using config options:					if(transport.responseText != undefined && transport.responseText != "null" && transport.responseText != null) {						Ext.Msg.show({							   title:'Error',							   msg: transport.responseText,							   buttons: Ext.Msg.OK,							  // fn: processResult,							   animEl: 'elId',							   icon: Ext.Msg.ERROR							});					}									}					    					}).bind(this),			onFailure: (function(transport) {				// raise loading disable event.                this.facade.raiseEvent({                    type: ORYX.CONFIG.EVENT_LOADING_DISABLE                });				Ext.Msg.alert(ORYX.I18N.Oryx.title, ORYX.I18N.Save.failed);								ORYX.Log.warn("Saving failed: " + transport.responseText);			}).bind(this),			on403: (function(transport) {				// raise loading disable event.                this.facade.raiseEvent({                    type: ORYX.CONFIG.EVENT_LOADING_DISABLE                });				Ext.Msg.alert(ORYX.I18N.Oryx.title, ORYX.I18N.Save.noRights);								ORYX.Log.warn("Saving failed: " + transport.responseText);			}).bind(this)		});					},		showSource: function (forceNew, event){		var reqURI= "/bpm/process/showProcessXML";		//Use the mask function on the Ext.getBody() element to mask the body element during Ajax calls		Ext.Ajax.on('beforerequest', function(connection,options){			Ext.getBody().mask('Loading...');		});				// Get the serialized svg image source		var svgClone 	= this.facade.getCanvas().getSVGRepresentation(true);		var svgDOM 		= DataManager.serialize(svgClone);		this.serializedDOM = Ext.encode(this.facade.getJSON());		// Get the stencilset		var ss = this.facade.getStencilSets().values()[0]		// Define Default values		var defaultData = {title:ORYX.I18N.Save.newProcess, summary:'', type:ss.title(), url: reqURI, namespace: ss.namespace() }		// Create a Template		/*var dialog = new Ext.XTemplate(							// TODO find some nice words here -- copy from above ;)					'<form class="oryx_repository_edit_model" action="#" id="edit_model" onsubmit="return false;">',															'<fieldset>',							'<p class="description">' + ORYX.I18N.Save.dialogDesciption + '</p>',							'<input type="hidden" name="namespace" value="{namespace}" />',							'<p><label for="edit_model_title">' + ORYX.I18N.Save.dialogLabelTitle + '</label><input type="text" class="text" name="title" value="{title}" id="edit_model_title" onfocus="this.className = \'text activated\'" onblur="this.className = \'text\'"/></p>',							'<p><label for="edit_model_summary">' + ORYX.I18N.Save.dialogLabelDesc + '</label><textarea rows="5" name="summary" id="edit_model_summary" onfocus="this.className = \'activated\'" onblur="this.className = \'\'">{summary}</textarea></p>',							'<p><label for="edit_model_type">' + ORYX.I18N.Save.dialogLabelType + '</label><input type="text" name="type" class="text disabled" value="{type}" disabled="disabled" id="edit_model_type" /></p>',													'</fieldset>',										'</form>')*/		// Create the callback for the template		//callback = function(form){			//var title 		= form.elements["title"].value.strip();			title 			=  defaultData.title ;			//added changing title of page after first save			window.document.title = title + " - Oryx";						//var summary = form.elements["summary"].value.strip();				summary 	= defaultData.summary;						//ar namespace	= form.elements["namespace"].value.strip();			namespace		= defaultData.namespace;						//win.destroy();			// Send the request out			this.sourceSaveRequest( reqURI, { data: this.serializedDOM, svg: svgDOM, title: title, summary: summary, type: namespace }, forceNew);						Ext.Ajax.on('requestcomplete', function(connection,options){				Ext.getBody().unmask();			});			Ext.Ajax.on('requestexception', function(connection,options){				Ext.getBody().unmask();			});		//}.bind(this);			},		sourceSaveRequest: function(url, params, forceNew){		Ext.Ajax.request({			url: url,			params:params,			method: 'POST',			asynchronous: false,			failure:function(response,options){							},			success:function(response,options){				var xmlString = response.responseText;				var jsonXML = {};				jsonXML = JSON.parse(xmlString.toString());				var xmlParse = jsonXML.xml;								while (xmlParse.indexOf("<") !== -1) {					xmlParse = xmlParse.replace("<", "&lt;");			    }								while (xmlParse.indexOf(">") !== -1) {					xmlParse = xmlParse.replace(">","&gt;");			    }				document.getElementById('view-source').innerHTML ="<pre id='xmlsource' name='xmlsource' >"+ xmlParse + "</pre>";				document.getElementById('oryx-canvas123').style.display="none";				document.getElementById('view-source').style.display="block";				var browserHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;				var currentHeight = (browserHeight - 54)+"px";				document.getElementById('view-source').style.height = currentHeight; 				document.getElementById('view-source').style.overflow = "auto";						}		});	},        /**     * Saves the current process to the server.     */    save: function(forceNew, event){            // raise loading enable event       /* this.facade.raiseEvent({            type: ORYX.CONFIG.EVENT_LOADING_ENABLE,			text: ORYX.I18N.Save.saving        });*/                // asynchronously ...        window.setTimeout((function(){                    // ... save synchronously            this.saveSynchronously(forceNew);                    }).bind(this), 10);                return true;    }	});ORYX.Plugins.File = ORYX.Plugins.AbstractPlugin.extend({    facade: undefined,	        construct: function(facade){        this.facade = facade;                /*this.facade.offer({            'name': ORYX.I18N.File.print,            'functionality': this.print.bind(this),            'group': ORYX.I18N.File.group,            'icon': ORYX.PATH + "images/printer.png",            'description': ORYX.I18N.File.printDesc,            'index': 3,            'minShape': 0,            'maxShape': 0        });                this.facade.offer({            'name': ORYX.I18N.File.pdf,            'functionality': this.exportPDF.bind(this),            'group': ORYX.I18N.File.group,            'icon': ORYX.PATH + "images/page_white_acrobat.png",            'description': ORYX.I18N.File.pdfDesc,            'index': 4,            'minShape': 0,            'maxShape': 0        });        this.facade.offer({            'name': ORYX.I18N.File.svg,            'functionality': this.exportSVG.bind(this),            'group': ORYX.I18N.File.group,            'icon': ORYX.PATH + "images/page_white_code_red.png",            'description': ORYX.I18N.File.svgDesc,            'index': 4,            'minShape': 0,            'maxShape': 0        });        this.facade.offer({            'name': ORYX.I18N.File.info,            'functionality': this.info.bind(this),            'group': ORYX.I18N.File.group,            'icon': ORYX.PATH + "images/information.png",            'description': ORYX.I18N.File.infoDesc,            'index': 5,            'minShape': 0,            'maxShape': 0        });*/    },            info: function(){            var info = '<iframe src="' + ORYX.CONFIG.LICENSE_URL + '" type="text/plain" ' + 				   'style="border:none;display:block;width:575px;height:460px;"/>' +				   '\n\n<pre style="display:inline;">Version: </pre>' + 				   '<iframe src="' + ORYX.CONFIG.VERSION_URL + '" type="text/plain" ' + 				   'style="border:none;overflow:hidden;display:inline;width:40px;height:20px;"/>';		this.infoBox = Ext.Msg.show({		   title: ORYX.I18N.Oryx.title,		   msg: info,		   width: 640,		   maxWidth: 640,		   maxHeight: 480,		   buttons: Ext.MessageBox.OK		});                return false;    },    exportSVG: function(){        var resource = location.href;                // Get the serialized svg image source        var svgClone = this.facade.getCanvas().getSVGRepresentation(true);                var svgDOM = DataManager.serialize(svgClone);        this.openDownloadWindow("oryx.svg", svgDOM);                    },    exportPDF: function(){    			this.facade.raiseEvent({type:ORYX.CONFIG.EVENT_LOADING_ENABLE, text:ORYX.I18N.File.genPDF});		        var resource = location.href;                // Get the serialized svg image source        var svgClone = this.facade.getCanvas().getSVGRepresentation(true);                var svgDOM = DataManager.serialize(svgClone);		        // Send the svg to the server.        //TODO make this better by using content negotiation instead of format parameter.        //TODO make this better by generating svg on the server, too.        new Ajax.Request(ORYX.CONFIG.PDF_EXPORT_URL, {            method: 'POST',            parameters: {                resource: resource,                data: svgDOM,                format: "pdf"            },            onSuccess: (function(request){            	this.facade.raiseEvent({type:ORYX.CONFIG.EVENT_LOADING_DISABLE});				                // Because the pdf may be opened in the same window as the                // process, yet the process may not have been saved, we're                // opening every other representation in a new window.                // location.href = request.responseText                window.open(request.responseText);            }).bind(this),			onFailure: (function(){				this.facade.raiseEvent({type:ORYX.CONFIG.EVENT_LOADING_DISABLE});								Ext.Msg.alert(ORYX.I18N.Oryx.title, ORYX.I18N.File.genPDFFailed);			}).bind(this)        });    },        print: function(){				Ext.Msg.show({		   title		: ORYX.I18N.File.printTitle,		   msg			: ORYX.I18N.File.printMsg,		   buttons		: Ext.Msg.YESNO,		   icon			: Ext.MessageBox.QUESTION,		   fn			:  function(btn) {	        								if (btn == "yes") {																	// Set all options for the new window									var option = $H({										width: 300,										height: 400,										toolbar: "no",										status: "no",										menubar: "yes",										dependent: "yes",										resizable: "yes",										scrollbars: "yes"									});																		// Create the new window with all the settings									var newWindow = window.open("", "PrintWindow", option.invoke('join', '=').join(','));																		// Add a style tag to the head and hide all controls									var head = newWindow.document.getElementsByTagName('head')[0];									var style = document.createElement("style");									style.innerHTML = " body {padding:0px; margin:0px} .svgcontainer { display:none; }";									head.appendChild(style);																		// Clone the svg-node and append this to the new body									newWindow.document.getElementsByTagName('body')[0].appendChild(this.facade.getCanvas().getSVGRepresentation());									var svg = newWindow.document.getElementsByTagName('body')[0].getElementsByTagName('svg')[0];																		// Set the width and height									svg.setAttributeNS(null, 'width', 1100);									svg.setAttributeNS(null, 'height', 1400);																		// Set the correct size and rotation									svg.lastChild.setAttributeNS(null, 'transform', 'scale(0.47, 0.47) rotate(270, 1510, 1470)');																		var markers = ['marker-start', 'marker-mid', 'marker-end']									var path = $A(newWindow.document.getElementsByTagName('path'));									path.each(function(pathNode){										markers.each(function(marker){											// Get the marker value											var url = pathNode.getAttributeNS(null, marker);											if (!url) {												return											};																						// Replace the URL and set them new											url = "url(about:blank#" + url.slice(5);											pathNode.setAttributeNS(null, marker, url);										});									});																		// Get the print dialog									newWindow.print();																		return true;								}							}.bind(this)			});    }   });confirmDefaultTaskName =  function(btn) {	if (btn == 'ok') {		win.show();	} else {	}}	var changedTaskForm = ""; //Create a new window				/*win = new Ext.Window({	id:		'Propertie_Window',    width:	'auto',    height:	'auto',    title:	forceNew ? ORYX.I18N.Save.saveAsTitle : ORYX.I18N.Save.save,    modal:	true,	bodyStyle: 'background:#FFFFFF',    html: 	dialog.apply( defaultData ),	buttons:[{		text: ORYX.I18N.Save.saveBtn,		handler: function(){			callback( $('edit_model') )							}	},{    	text: ORYX.I18N.Save.close,    	handler: function(){           this.facade.raiseEvent({                type: ORYX.CONFIG.EVENT_LOADING_DISABLE            });						        	win.destroy();    	}.bind(this)	}]});*//**  * Method to set Dom level 2 function not support in chrome version 34.0.26 * @return attr */Document.prototype.createAttributeNS = function(name, ns) {  var attr = this.createAttribute(name);  attr.namespaceURI = ns;  return attr;}/** * Method to load model or create new one * (moved from editor handler) */window.onOryxResourcesLoaded = function() {	var currentURL = document.URL;	var locationSlice = currentURL.split("?");	if (!locationSlice[1]) {		var stencilset = ORYX.Utils.getParamFromUrl('stencilset') || ORYX.CONFIG.SSET; // || "stencilsets/bpmn2.0/bpmn2.0.json";		new ORYX.Editor({			id: 'oryx-canvas123',			//fullscreen to false Rajasekar            fullscreen: false,			stencilset: {				url: ORYX.PATH + "/" + stencilset			}		});	} else {		//ORYX.Editor.createByUrl(		//		'/bpm/process/editProcess',{id: 'oryx-canvas123'});				var reqURI= "/bpm/process/editProcess";		var params = {id:decodeURIComponent(locationSlice[1].split("&")[0].split("=")[1]),key:decodeURIComponent(locationSlice[1].split("&")[1].split("=")[1])};		Ext.Ajax.request({			url: reqURI,			params:params,			method: 'POST',			asynchronous: false,			failure:function(response,options){				Ext.Msg.alert("");			},			success:function(response,options){				var jsonString = response.responseText;				var jsonMap = {};				jsonMap = JSON.parse(jsonString.toString());				var jsonParse = jsonMap.jsonRes;				var editorConfig = Ext.decode(jsonParse);				var  taskForms = new Array();				var j = 0;				var taskName = "";				var taskNameMap = {};				var formId = "";				for(var i=0 ;i< editorConfig.model.childShapes.length ;i++){					if(editorConfig.model.childShapes[i].stencil != undefined && editorConfig.model.childShapes[i].stencil.id == "CollapsedSubprocess"){						if(editorConfig.model.childShapes[i].properties.addsubprocess != undefined && editorConfig.model.childShapes[i].properties.addsubprocess != ""){					var index = processStore.find("id", editorConfig.model.childShapes[i].properties.form);					if(index != -1){} else {					Ext.Msg.show({					   title:'Information',					   msg:  "The subprocess <b>"+editorConfig.model.childShapes[i].properties.name+ "</b> element <i> "+editorConfig.model.childShapes[i].properties.addsubprocess.split(":")[0]+"</i>  process has been changed as new Version.Please change it to update new version",					   buttons: Ext.Msg.OKCANCEL});					}					}					}					if(editorConfig.model.childShapes[i] != undefined && editorConfig.model.childShapes[i].properties.form != undefined){										var index = formStore.find("id", editorConfig.model.childShapes[i].properties.form);					if(index != -1){} else {						taskName = editorConfig.model.childShapes[i].properties.name;						taskForms[j] = editorConfig.model.childShapes[i].properties.form;						formId = editorConfig.model.childShapes[i].properties.form;						j++;					}										var jspFormIndex = newFormStore.find("id", editorConfig.model.childShapes[i].properties.form);					if(jspFormIndex != -1){} else {						taskName = editorConfig.model.childShapes[i].properties.name;						taskForms[j] = editorConfig.model.childShapes[i].properties.form;						formId = editorConfig.model.childShapes[i].properties.form;						j++;					}					}					taskNameMap[formId] = taskName;									}				var taskFormMap = {};				for (var i = 0; i < taskForms.length; i++) {				    taskFormMap[taskForms[i]] = taskForms[i];				}				var formIds = [];				for (var key in taskFormMap) {				    formIds.push(key);				};				if(formIds.length > 0 && isFormChanged(formIds, taskNameMap)){					Ext.Msg.show({					   title:'Information',					   msg:  "The Form Version of Task "+changedTaskForm+" has been changed as new Version.Are you sure to change form version in Tasks ?",					   buttons: Ext.Msg.OKCANCEL,					   fn: function(btn) {						if (btn == 'ok') {							if(formIds.length > 1){								for(var i=0;i<formIds.length;i++){									Ext.Ajax.request({										waitMsg: 'Saving changes...',										method: 'GET',										headers: {'Content-Type': 'application/json'},										url:'/form/getFormById',										params: {formId:formIds[i].toString()},										failure:function(response){											Ext.Msg.show({												title:'Message',												msg: "failure. ",												buttons: Ext.Msg.OK,												animEl: 'elId',												icon: Ext.MessageBox.ERROR											});										},										success:function(response){											var responseObj = Ext.util.JSON.decode(response.responseText);											var resourceRecord = formStore.recordType;											var aRecordVal;											aRecordVal = new resourceRecord({												    id: responseObj.forms[0].id,												    formName: responseObj.forms[0].formName,												});											formIdMap[responseObj.forms[0].id] = responseObj.forms[0].formName;											var isRecordPresent =  formStore.findBy(function (record, formName) {											if (record.get('formName') == responseObj.forms[0].formName){											    return true;											    											}											return false;										    	});												if(isRecordPresent == -1) {												formStore.add(aRecordVal);												formStore.commitChanges();											}										}									});								}							} else {								Ext.Ajax.request({									waitMsg: 'Saving changes...',									method: 'GET',									headers: {'Content-Type': 'application/json'},									url:'/form/getFormById',									params: {formId:formIds.toString()},									failure:function(response){										Ext.Msg.show({											title:'Message',											msg: "failure. ",											buttons: Ext.Msg.OK,											animEl: 'elId',											icon: Ext.MessageBox.ERROR										});									},									success:function(response){										var responseObj = Ext.util.JSON.decode(response.responseText);										var resourceRecord = formStore.recordType;										var aRecordVal;										aRecordVal = new resourceRecord({											    id: responseObj.forms[0].id,											    formName: responseObj.forms[0].formName,										    });										formIdMap[formIds.toString()] = responseObj.forms[0].formName;										var isRecordPresent =  formStore.findBy(function (record, formName) {										if (record.get('formName') == responseObj.forms[0].formName){										    return true; 										    										}										return false;									   	});											if(isRecordPresent == -1) {											formStore.add(aRecordVal);											formStore.commitChanges();										}													}								});							}						} else {							if(formIds.length > 1){								for(var i=0;i<formIds.length;i++){									Ext.Ajax.request({										waitMsg: 'Saving changes...',										method: 'GET',										headers: {'Content-Type': 'application/json'},										url:'/form/getLatestFormVersion',										params: {formId:formIds[i].toString()},										failure:function(response){											Ext.Msg.show({												title:'Message',												msg: "failure. ",												buttons: Ext.Msg.OK,												animEl: 'elId',												icon: Ext.MessageBox.ERROR											});										},										success:function(response){											var responseObj = Ext.util.JSON.decode(response.responseText);											var resourceRecord = formStore.recordType;											var aRecordVal = new resourceRecord({												    id: responseObj.forms.id,												    formName: responseObj.forms.formName,											});											var isRecordPresent =  formStore.findBy(function (record, id) {											if (record.get('id') == responseObj.forms.id){											    return true; 											}											return false; 										    	});												if(isRecordPresent == -1) {												formStore.add(aRecordVal);												formStore.commitChanges();											}										}									});								}							} else {													Ext.Ajax.request({									waitMsg: 'Saving changes...',									method: 'GET',									headers: {'Content-Type': 'application/json'},									url:'/form/getLatestFormVersion',									params: {formId:formIds.toString()},									failure:function(response){										Ext.Msg.show({											title:'Message',											msg: "failure. ",											buttons: Ext.Msg.OK,											animEl: 'elId',											icon: Ext.MessageBox.ERROR										});									},									success:function(response){										var responseObj = Ext.util.JSON.decode(response.responseText);										var resourceRecord = formStore.recordType;										var aRecordVal = new resourceRecord({											    id: responseObj.forms.id,											    formName: responseObj.forms.formName,										});										var isRecordPresent =  formStore.findBy(function (record, id) {										if (record.get('id') == formIds.toString()){										    return true; 										}										return false;									    	});											if(isRecordPresent == -1) {											formStore.add(aRecordVal);											formStore.commitChanges();										}									}								});							}						}						new ORYX.Editor(editorConfig);					} ,					animEl: 'elId',					icon: Ext.MessageBox.INFO					});				} else {					new ORYX.Editor(editorConfig);				}				//editorConfig = Ext.applyIf(editorConfig, config);							}		});  	}};/** * to check where the form stores has the form * * @return boolean */ function isFormChanged(taskForms, taskFormChanged){	var formIds = [];	if(taskForms.length > 1){		for(var i=0;i<taskForms.length;i++){			var index = formStore.find("id", taskForms[i].toString());			if(index != -1){				formIds.push(taskForms[i].toString());			} else {				changedTaskForm += taskFormChanged[taskForms[i].toString()]+",";			}			var newFormStoreIndex = newFormStore.find("id", taskForms[i].toString());			if(newFormStoreIndex != -1){				formIds.push(taskForms[i].toString());			} else {				changedTaskForm += taskFormChanged[taskForms[i].toString()]+",";						}		}		changedTaskForm = changedTaskForm.slice(0, -1);		var splittedValue = changedTaskForm.split(',');		var newVal = "";		for(var i = 0; i < splittedValue.length; i++) {				if(splittedValue[i+1] == splittedValue[i]) {						newVal += splittedValue[i]+",";				}		}		changedTaskForm = newVal.slice(0,-1);	} else {		var index = formStore.find("id", taskForms.toString());		if(index != -1){			formIds.push(taskForms.toString());		}		var newFormStoreIndex = newFormStore.find("id", taskForms.toString());		if(newFormStoreIndex != -1){			formIds.push(taskForms.toString());		}	}	if(formIds.length == taskForms.length){		return false;	} else {		return true;	} }